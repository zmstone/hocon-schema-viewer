[
    {
        "fields": [
            {
                "aliases": [],
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "broker:listeners"
                }
            },
            {
                "aliases": [],
                "desc": "<code>zone</code> 是按<code>name</code> 分组的一组配置。\n对于灵活的配置映射，可以将 <code>name</code> 设置为侦听器的 <code>zone</code> 配置。\n注：名为 <code>default</code> 的内置区域是自动创建的，无法删除。",
                "name": "zones",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:zone"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "全局的 MQTT 配置项。\nmqtt 下所有的配置作为全局的默认值存在，它可以被 <code>zone</code> 中的配置覆盖。",
                "name": "mqtt",
                "type": {
                    "kind": "struct",
                    "name": "broker:mqtt"
                }
            },
            {
                "aliases": [],
                "desc": "全局 MQTT 监听器的默认认证配置。 为每个监听器配置认证参考监听器器配置中的<code>authentication</code> 配置。\n\n该配置可以被配置为：\n<ul>\n  <li><code>[]</code>: 默认值，允许所有的登录请求\n  <li>配置为单认证器，例如 <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>配置为认证器数组</li>\n</ul>\n\n当配置为认证链后，登录凭证会按照配置的顺序进行检查，直到做出<code>allow</code> 或 <code>deny</code>的结果。\n\n如果在所有的认证器都执行完后，还是没有结果，登录将被拒绝。",
                "name": "authentication",
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "struct",
                                "name": "authn-builtin_db:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mysql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-postgresql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:replica-set"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:sharded-cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:sentinel"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:get"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:post"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:hmac-based"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:public-key"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:jwks"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-scram-builtin_db:authentication"
                            }
                        ]
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "desc": "授权（ACL）。EMQX 支持完整的客户端访问控制（ACL）。",
                "name": "authorization",
                "type": {
                    "kind": "struct",
                    "name": "authorization"
                }
            },
            {
                "aliases": [],
                "name": "node",
                "type": {
                    "kind": "struct",
                    "name": "node"
                }
            },
            {
                "aliases": [],
                "name": "cluster",
                "type": {
                    "kind": "struct",
                    "name": "cluster"
                }
            },
            {
                "aliases": [],
                "name": "log",
                "type": {
                    "kind": "struct",
                    "name": "log"
                }
            },
            {
                "aliases": [],
                "name": "rpc",
                "type": {
                    "kind": "struct",
                    "name": "rpc"
                }
            },
            {
                "aliases": [],
                "desc": "Broker 相关配置项。",
                "name": "broker",
                "type": {
                    "kind": "struct",
                    "name": "broker"
                }
            },
            {
                "aliases": [],
                "desc": "系统主题配置。",
                "name": "sys_topics",
                "type": {
                    "kind": "struct",
                    "name": "broker:sys_topics"
                }
            },
            {
                "aliases": [],
                "name": "force_shutdown",
                "type": {
                    "kind": "struct",
                    "name": "broker:force_shutdown"
                }
            },
            {
                "aliases": [],
                "name": "overload_protection",
                "type": {
                    "kind": "struct",
                    "name": "broker:overload_protection"
                }
            },
            {
                "aliases": [],
                "name": "force_gc",
                "type": {
                    "kind": "struct",
                    "name": "broker:force_gc"
                }
            },
            {
                "aliases": [],
                "name": "conn_congestion",
                "type": {
                    "kind": "struct",
                    "name": "broker:conn_congestion"
                }
            },
            {
                "aliases": [],
                "name": "stats",
                "type": {
                    "kind": "struct",
                    "name": "broker:stats"
                }
            },
            {
                "aliases": [],
                "name": "sysmon",
                "type": {
                    "kind": "struct",
                    "name": "broker:sysmon"
                }
            },
            {
                "aliases": [],
                "name": "alarm",
                "type": {
                    "kind": "struct",
                    "name": "broker:alarm"
                }
            },
            {
                "aliases": [],
                "name": "flapping_detect",
                "type": {
                    "kind": "struct",
                    "name": "broker:flapping_detect"
                }
            },
            {
                "aliases": [],
                "name": "persistent_session_store",
                "type": {
                    "kind": "struct",
                    "name": "broker:persistent_session_store"
                }
            },
            {
                "aliases": [],
                "name": "trace",
                "type": {
                    "kind": "struct",
                    "name": "broker:trace"
                }
            },
            {
                "aliases": [],
                "name": "bridges",
                "type": {
                    "kind": "struct",
                    "name": "bridge:bridges"
                }
            },
            {
                "aliases": [],
                "name": "retainer",
                "type": {
                    "kind": "struct",
                    "name": "retainer"
                }
            },
            {
                "aliases": [],
                "name": "statsd",
                "type": {
                    "kind": "struct",
                    "name": "statsd"
                }
            },
            {
                "aliases": [],
                "name": "auto_subscribe",
                "type": {
                    "kind": "struct",
                    "name": "auto_subscribe"
                }
            },
            {
                "aliases": [],
                "name": "delayed",
                "type": {
                    "kind": "struct",
                    "name": "modules:delayed"
                }
            },
            {
                "aliases": [],
                "name": "telemetry",
                "type": {
                    "kind": "struct",
                    "name": "modules:telemetry"
                }
            },
            {
                "aliases": [],
                "desc": "List of topic rewrite rules.",
                "name": "rewrite",
                "type": {
                    "elements": {
                        "kind": "struct",
                        "name": "modules:rewrite"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "desc": "List of topics whose metrics are reported.",
                "name": "topic_metrics",
                "type": {
                    "elements": {
                        "kind": "struct",
                        "name": "modules:topic_metrics"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "name": "plugins",
                "type": {
                    "kind": "struct",
                    "name": "plugin:plugins"
                }
            },
            {
                "aliases": [],
                "name": "dashboard",
                "type": {
                    "kind": "struct",
                    "name": "dashboard"
                }
            },
            {
                "aliases": [],
                "name": "gateway",
                "type": {
                    "kind": "struct",
                    "name": "gateway"
                }
            },
            {
                "aliases": [],
                "name": "prometheus",
                "type": {
                    "kind": "struct",
                    "name": "prometheus"
                }
            },
            {
                "aliases": [],
                "name": "rule_engine",
                "type": {
                    "kind": "struct",
                    "name": "rule_engine"
                }
            },
            {
                "aliases": [],
                "name": "exhook",
                "type": {
                    "kind": "struct",
                    "name": "exhook"
                }
            },
            {
                "aliases": [],
                "name": "psk_authentication",
                "type": {
                    "kind": "struct",
                    "name": "authn-psk:psk_authentication"
                }
            },
            {
                "aliases": [],
                "name": "limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter"
                }
            },
            {
                "aliases": [],
                "name": "slow_subs",
                "type": {
                    "kind": "struct",
                    "name": "slow_subs"
                }
            },
            {
                "aliases": [],
                "name": "api_key",
                "type": {
                    "kind": "struct",
                    "name": "api_key"
                }
            }
        ],
        "full_name": "Root Config Keys",
        "paths": [],
        "tags": []
    },
    {
        "desc": "API 密钥， 可用于请求除管理 API 密钥及 Dashboard 用户管理 API 的其它接口",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "用于在启动 emqx 时，添加 API 密钥，其格式为：\n      ```\n      7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n      ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n      ```",
                "name": "bootstrap_file",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "api_key",
        "paths": [
            "api_key"
        ],
        "tags": []
    },
    {
        "desc": "使用静态文件授权",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "file"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "包含 ACL 规则的文件路径。\n如果在启动 EMQX 节点前预先配置该路径，\n那么可以将该文件置于任何 EMQX 可以访问到的位置。\n\n如果从 EMQX Dashboard 或 HTTP API 创建或修改了规则集，\n那么EMQX将会生成一个新的文件并将它存放在 `data_dir` 下的 `authz` 子目录中，\n并从此弃用旧的文件。",
                "name": "path",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            }
        ],
        "full_name": "authz:file",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用外部 HTTP 服务器授权(GET 请求)。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "http"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "授权 HTTP 服务器地址。",
                "name": "url",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "HTTP 请求超时时长。",
                "name": "request_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP request body。",
                "name": "body",
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "连接HTTP服务器的超时时间。",
                "name": "connect_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                "name": "enable_pipelining",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "max_retries",
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "设置 HTTP 请求的参数。",
                "name": "request",
                "type": {
                    "kind": "struct",
                    "name": "connector-http:request"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "retry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP 请求方法",
                "name": "method",
                "type": {
                    "kind": "singleton",
                    "name": "get"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                    "oneliner": false
                },
                "desc": "HTTP Headers 列表 (无 <code>content-type</code>) 。",
                "name": "headers",
                "raw_default": {
                    "accept": "application/json",
                    "cache-control": "no-cache",
                    "connection": "keep-alive",
                    "keep-alive": "timeout=30, max=1000"
                },
                "type": {
                    "kind": "primitive",
                    "name": "[{binary(), binary()}]"
                }
            }
        ],
        "full_name": "authz:http_get",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用外部 HTTP 服务器授权(POST 请求)。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "http"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "授权 HTTP 服务器地址。",
                "name": "url",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "HTTP 请求超时时长。",
                "name": "request_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP request body。",
                "name": "body",
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "连接HTTP服务器的超时时间。",
                "name": "connect_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                "name": "enable_pipelining",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "max_retries",
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "设置 HTTP 请求的参数。",
                "name": "request",
                "type": {
                    "kind": "struct",
                    "name": "connector-http:request"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "retry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP 请求方法",
                "name": "method",
                "type": {
                    "kind": "singleton",
                    "name": "post"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                    "oneliner": false
                },
                "desc": "HTTP Headers 列表",
                "name": "headers",
                "raw_default": {
                    "accept": "application/json",
                    "cache-control": "no-cache",
                    "connection": "keep-alive",
                    "content-type": "application/json",
                    "keep-alive": "timeout=30, max=1000"
                },
                "type": {
                    "kind": "primitive",
                    "name": "[{binary(), binary()}]"
                }
            }
        ],
        "full_name": "authz:http_post",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用内部数据库授权（mnesia）。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "built_in_database"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "authz:mnesia",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 MongoDB 授权（副本集模式）",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "mongodb"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "`MongoDB` 授权数据集。",
                "name": "collection",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- <code>${username}</code>：将在运行时被替换为客户端连接时使用的用户名<br/>\n- <code>${clientid}</code>：将在运行时被替换为客户端连接时使用的客户端标识符",
                "name": "filter",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "rs",
                    "oneliner": true
                },
                "desc": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
                "name": "mongo_type",
                "raw_default": "rs",
                "type": {
                    "kind": "singleton",
                    "name": "rs"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unsafe",
                    "oneliner": true
                },
                "desc": "写模式。",
                "name": "w_mode",
                "raw_default": "unsafe",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "unsafe",
                        "safe"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "master",
                    "oneliner": true
                },
                "desc": "读模式。",
                "name": "r_mode",
                "raw_default": "master",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "master",
                        "slave_ok"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "副本集的名称。",
                "name": "replica_set_name",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用 DNS SRV 记录。",
                "name": "srv_record",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "与用户证书关联的数据库名称。",
                "name": "auth_source",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "name": "topology",
                "type": {
                    "kind": "struct",
                    "name": "topology"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authz:mongo_rs",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 MongoDB 授权（分片集群模式）。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "mongodb"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "`MongoDB` 授权数据集。",
                "name": "collection",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- <code>${username}</code>：将在运行时被替换为客户端连接时使用的用户名<br/>\n- <code>${clientid}</code>：将在运行时被替换为客户端连接时使用的客户端标识符",
                "name": "filter",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "sharded",
                    "oneliner": true
                },
                "desc": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
                "name": "mongo_type",
                "raw_default": "sharded",
                "type": {
                    "kind": "singleton",
                    "name": "sharded"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unsafe",
                    "oneliner": true
                },
                "desc": "写模式。",
                "name": "w_mode",
                "raw_default": "unsafe",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "unsafe",
                        "safe"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用 DNS SRV 记录。",
                "name": "srv_record",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "与用户证书关联的数据库名称。",
                "name": "auth_source",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "name": "topology",
                "type": {
                    "kind": "struct",
                    "name": "topology"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authz:mongo_sharded",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 MongoDB 授权（单实例）。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "mongodb"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "`MongoDB` 授权数据集。",
                "name": "collection",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- <code>${username}</code>：将在运行时被替换为客户端连接时使用的用户名<br/>\n- <code>${clientid}</code>：将在运行时被替换为客户端连接时使用的客户端标识符",
                "name": "filter",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "single",
                    "oneliner": true
                },
                "desc": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
                "name": "mongo_type",
                "raw_default": "single",
                "type": {
                    "kind": "singleton",
                    "name": "single"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unsafe",
                    "oneliner": true
                },
                "desc": "写模式。",
                "name": "w_mode",
                "raw_default": "unsafe",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "unsafe",
                        "safe"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用 DNS SRV 记录。",
                "name": "srv_record",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "与用户证书关联的数据库名称。",
                "name": "auth_source",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "name": "topology",
                "type": {
                    "kind": "struct",
                    "name": "topology"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authz:mongo_single",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 MySOL 数据库授权",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "mysql"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"root\"",
                    "oneliner": true
                },
                "desc": "内部数据库的用户名。",
                "name": "username",
                "raw_default": "root",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "SQL 预处理语句列表。",
                "name": "prepare_statement",
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "desc": "访问控制数据查询语句/查询命令。",
                "name": "query",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "authz:mysql",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 PostgreSQL 数据库授权",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "postgresql"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "SQL 预处理语句列表。",
                "name": "prepare_statement",
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "desc": "访问控制数据查询语句/查询命令。",
                "name": "query",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "authz:postgresql",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 Redis 授权（集群模式）。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "redis"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "cluster",
                    "oneliner": true
                },
                "desc": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
                "name": "redis_type",
                "raw_default": "cluster",
                "type": {
                    "kind": "singleton",
                    "name": "cluster"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "访问控制数据查查询命令",
                "name": "cmd",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "authz:redis_cluster",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 Redis 授权（哨兵模式）。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "redis"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "sentinel",
                    "oneliner": true
                },
                "desc": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
                "name": "redis_type",
                "raw_default": "sentinel",
                "type": {
                    "kind": "singleton",
                    "name": "sentinel"
                }
            },
            {
                "aliases": [],
                "desc": "Redis 哨兵模式下的集群名称。",
                "name": "sentinel",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "Redis 数据库 ID。",
                "name": "database",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "访问控制数据查查询命令",
                "name": "cmd",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "authz:redis_sentinel",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "使用 Redis 授权（单实例）。",
        "fields": [
            {
                "aliases": [],
                "desc": "数据后端类型",
                "name": "type",
                "type": {
                    "kind": "singleton",
                    "name": "redis"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "single",
                    "oneliner": true
                },
                "desc": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
                "name": "redis_type",
                "raw_default": "single",
                "type": {
                    "kind": "singleton",
                    "name": "single"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "Redis 数据库 ID。",
                "name": "database",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "访问控制数据查查询命令",
                "name": "cmd",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "authz:redis_single",
        "paths": [
            "authorization.sources.$INDEX"
        ],
        "tags": [
            "Authorization"
        ]
    },
    {
        "desc": "Settings for the alarms.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "[log, publish]",
                    "oneliner": true
                },
                "desc": "警报激活时触发的动作。<br/>目前，支持以下操作：<code>log</code> 和 <code>publish</code>.\n<code>log</code> 将告警写入日志 (控制台或者文件).\n<code>publish</code> 将告警作为 MQTT 消息发布到系统主题:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
                "examples": [
                    [
                        "log",
                        "publish"
                    ]
                ],
                "name": "actions",
                "raw_default": [
                    "log",
                    "publish"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
                "examples": [
                    1000
                ],
                "name": "size_limit",
                "raw_default": 1000,
                "type": {
                    "kind": "primitive",
                    "name": "1..3000"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"24h\"",
                    "oneliner": true
                },
                "desc": "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
                "examples": [
                    [
                        50,
                        52,
                        104
                    ]
                ],
                "name": "validity_period",
                "raw_default": "24h",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "broker:alarm",
        "paths": [
            "alarm"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the authorization cache.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用或禁用授权缓存。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "32",
                    "oneliner": true
                },
                "desc": "缓存项的最大数量。",
                "name": "max_size",
                "raw_default": 32,
                "type": {
                    "kind": "primitive",
                    "name": "1..1048576"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "缓存数据的生存时间。",
                "name": "ttl",
                "raw_default": "1m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "broker:authz_cache",
        "paths": [
            "authorization.cache"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Message broker options.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用 Session Registry",
                "name": "enable_session_registry",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "quorum",
                    "oneliner": true
                },
                "desc": "Session 在集群中的锁策略。\n  - `loca`：仅锁本节点的 Session；\n  - `one`：任选一个其它节点加锁；\n  - `quorum`：选择集群中半数以上的节点加锁；\n  - `all`：选择所有节点加锁。",
                "name": "session_locking_strategy",
                "raw_default": "quorum",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "local",
                        "leader",
                        "quorum",
                        "all"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "round_robin",
                    "oneliner": true
                },
                "desc": "共享订阅消息派发策略。\n  - `random`：随机挑选一个共享订阅者派发；\n  - `round_robin`：使用 round-robin 策略派发；\n  - `round_robin_per_group`：在共享组内循环选择下一个成员；\n  - `local`：选择随机的本地成员，否则选择随机的集群范围内成员;\n  - `sticky`：总是使用上次选中的订阅者派发，直到它断开连接；\n  - `hash_clientid`：使用发送者的 Client ID 进行 Hash 来选择订阅者;\n  - `hash_topic`：使用源主题进行 Hash 来选择订阅者。",
                "name": "shared_subscription_strategy",
                "raw_default": "round_robin",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "random",
                        "round_robin",
                        "round_robin_per_group",
                        "sticky",
                        "local",
                        "hash_topic",
                        "hash_clientid"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "该配置项已废弃，会在 5.1 中移除。\n启用/禁用 QoS 1 和 QoS 2 消息的共享派发确认。\n开启后，允许将消息从未及时回复 ACK 的订阅者 （例如，客户端离线） 重新派发给另外一个订阅者。",
                "name": "shared_dispatch_ack_enabled",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启批量清除路由。",
                "name": "route_batch_clean",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "设置共享订阅组为单位的分发策略。该配置是一个从组名到\n策略名的一个map，组名不得包含 `[A-Za-z0-9]` 之外的特殊字符。",
                "examples": [
                    {
                        "example_group": {
                            "strategy": "random"
                        }
                    }
                ],
                "name": "shared_subscription_group",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:shared_subscription_group"
                    }
                }
            }
        ],
        "full_name": "broker",
        "paths": [
            "broker"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for `conn_congestion` alarm.\n\nSometimes the MQTT connection (usually an MQTT subscriber) may\nget \"congested\", because there are too many packets to be sent.\nThe socket tries to buffer the packets until the buffer is\nfull. If more packets arrive after that, the packets will be\n\"pending\" in the queue, and we consider the connection\ncongested.\n\nNote: `sndbuf` can be set to larger value if the\nalarm is triggered too often.\nThe name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,\nwhere the `<ClientID>` is the client ID of the congested MQTT connection,\nand `<Username>` is the username or `unknown_user`.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用或者禁用连接阻塞告警功能。",
                "name": "enable_alarm",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "清除警报前的最短时间。<br/>只有当队列中没有挂起的数据，并且连接至少被堵塞了 <code>min_alarm_sustain_duration</code> 毫秒时，<br/>报警才会被清除。这是为了避免太频繁地清除和再次发出警报。",
                "name": "min_alarm_sustain_duration",
                "raw_default": "1m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "broker:conn_congestion",
        "paths": [
            "conn_congestion"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Compression options.",
        "fields": [
            {
                "aliases": [],
                "desc": "压缩级别",
                "name": "level",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "none",
                        "default",
                        "best_compression",
                        "best_speed"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
                "name": "mem_level",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "1..9"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "default",
                    "oneliner": true
                },
                "desc": "指定压缩策略。",
                "name": "strategy",
                "raw_default": "default",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "default",
                        "filtered",
                        "huffman_only",
                        "rle"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "takeover",
                    "oneliner": true
                },
                "desc": "接管意味着在服务器消息之间保留压缩状态。",
                "name": "server_context_takeover",
                "raw_default": "takeover",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "takeover",
                        "no_takeover"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "takeover",
                    "oneliner": true
                },
                "desc": "接管意味着在客户端消息之间保留压缩状态。",
                "name": "client_context_takeover",
                "raw_default": "takeover",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "takeover",
                        "no_takeover"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "15",
                    "oneliner": true
                },
                "desc": "指定服务器压缩上下文的大小。",
                "name": "server_max_window_bits",
                "raw_default": 15,
                "type": {
                    "kind": "primitive",
                    "name": "8..15"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "15",
                    "oneliner": true
                },
                "desc": "指定客户端压缩上下文的大小。",
                "name": "client_max_window_bits",
                "raw_default": 15,
                "type": {
                    "kind": "primitive",
                    "name": "8..15"
                }
            }
        ],
        "full_name": "broker:deflate_opts",
        "paths": [
            "listeners.ws.$name.websocket.deflate_opts",
            "listeners.wss.$name.websocket.deflate_opts"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端已连接事件消息。",
                "name": "client_connected",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端已断开连接事件消息。",
                "name": "client_disconnected",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否开启客户端已成功订阅主题事件消息。",
                "name": "client_subscribed",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否开启客户端已成功取消订阅主题事件消息。",
                "name": "client_unsubscribed",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:event_names",
        "paths": [
            "sys_topics.sys_event_messages"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用抖动检测功能。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "15",
                    "oneliner": true
                },
                "desc": "MQTT 客户端在“窗口”时间内允许的最大断开次数。",
                "name": "max_count",
                "raw_default": 15,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "抖动检测的时间窗口。",
                "name": "window_time",
                "raw_default": "1m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5m\"",
                    "oneliner": true
                },
                "desc": "抖动的客户端将会被禁止登录多长时间。",
                "name": "ban_time",
                "raw_default": "5m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "broker:flapping_detect",
        "paths": [
            "flapping_detect"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用强制垃圾回收。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "16000",
                    "oneliner": true
                },
                "desc": "在进程收到多少消息之后，对此进程执行垃圾回收。",
                "name": "count",
                "raw_default": 16000,
                "type": {
                    "kind": "primitive",
                    "name": "0..inf"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"16MB\"",
                    "oneliner": true
                },
                "desc": "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
                "name": "bytes",
                "raw_default": "16MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            }
        ],
        "full_name": "broker:force_gc",
        "paths": [
            "force_gc"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 `force_shutdown` 功能。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "消息队列的最大长度。",
                "name": "max_message_queue_len",
                "raw_default": 1000,
                "type": {
                    "kind": "primitive",
                    "name": "0..inf"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"32MB\"",
                    "oneliner": true
                },
                "desc": "Heap 的总大小。",
                "name": "max_heap_size",
                "raw_default": "32MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:wordsize()"
                }
            }
        ],
        "full_name": "broker:force_shutdown",
        "paths": [
            "force_shutdown"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "TLS options for QUIC transport.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "reuse_sessions",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "depth",
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "versions",
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "ciphers",
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "user_lookup_fun",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "secure_renegotiate",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "hibernate_after",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "dhfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "fail_if_no_peer_cert",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "honor_cipher_order",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "client_renegotiation",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "handshake_timeout",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "gc_after_handshake",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.20.",
                "name": "enable_crl_check",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:listener_quic_ssl_opts",
        "paths": [
            "listeners.quic.$name.ssl_options"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Socket options for SSL connections.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "tlsv1.3",
                    "tlsv1.2",
                    "tlsv1.1",
                    "tlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx_tls_psk:lookup\"",
                    "oneliner": true
                },
                "desc": "用于查找预共享密钥（PSK）标识的 EMQX 内部回调。",
                "name": "user_lookup_fun",
                "raw_default": "emqx_tls_psk:lookup",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                "name": "dhfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                "name": "fail_if_no_peer_cert",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                "name": "honor_cipher_order",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                "name": "client_renegotiation",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "握手完成所允许的最长时间",
                "name": "handshake_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "内存使用调优。如果启用，将在TLS/SSL握手完成后立即执行垃圾回收。TLS/SSL握手建立后立即进行GC。",
                "name": "gc_after_handshake",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否为该监听器启用 CRL 检查。",
                "name": "enable_crl_check",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:listener_ssl_opts",
        "paths": [
            "gateway.exproto.listeners.ssl.$name.ssl_options",
            "gateway.stomp.listeners.ssl.$name.ssl_options",
            "listeners.ssl.$name.ssl_options"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Socket options for WebSocket/SSL connections.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "tlsv1.3",
                    "tlsv1.2",
                    "tlsv1.1",
                    "tlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx_tls_psk:lookup\"",
                    "oneliner": true
                },
                "desc": "用于查找预共享密钥（PSK）标识的 EMQX 内部回调。",
                "name": "user_lookup_fun",
                "raw_default": "emqx_tls_psk:lookup",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                "name": "dhfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                "name": "fail_if_no_peer_cert",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                "name": "honor_cipher_order",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                "name": "client_renegotiation",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "握手完成所允许的最长时间",
                "name": "handshake_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "broker:listener_wss_opts",
        "paths": [
            "listeners.wss.$name.ssl_options"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "MQTT listeners identified by their protocol type and assigned names",
        "fields": [
            {
                "aliases": [],
                "desc": "TCP 监听器。",
                "name": "tcp",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:mqtt_tcp_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "SSL 监听器。",
                "name": "ssl",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:mqtt_ssl_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "HTTP websocket 监听器。",
                "name": "ws",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:mqtt_ws_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "HTTPS websocket 监听器。",
                "name": "wss",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:mqtt_wss_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "QUIC 监听器。",
                "name": "quic",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "broker:mqtt_quic_listener"
                    }
                }
            }
        ],
        "full_name": "broker:listeners",
        "paths": [
            "listeners"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "TCP 连接建立后，如果在 <code>idle_timeout</code> 指定的时间内未收到客户端的 MQTT CONNECT 报文，则连接将被断开。\n如果连接在 CONNECT 报文被 EMQX 接受之后空闲超过该时长，那么服务这个连接的 Erlang 进程会进入休眠以节省系统资源。\n注意，该配置值如果设置过大的情况下，如果大量恶意客户端只连接，但不发任何数据，可能会导致系统资源被恶意消耗。",
                "name": "idle_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1MB\"",
                    "oneliner": true
                },
                "desc": "允许的最大 MQTT 报文大小。",
                "name": "max_packet_size",
                "raw_default": "1MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "65535",
                    "oneliner": true
                },
                "desc": "允许的最大 MQTT Client ID 长度。",
                "name": "max_clientid_len",
                "raw_default": 65535,
                "type": {
                    "kind": "primitive",
                    "name": "23..65535"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "128",
                    "oneliner": true
                },
                "desc": "允许的最大主题层级。",
                "name": "max_topic_levels",
                "raw_default": 128,
                "type": {
                    "kind": "primitive",
                    "name": "1..65535"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "2",
                    "oneliner": true
                },
                "desc": "允许的最大 QoS 等级。",
                "name": "max_qos_allowed",
                "raw_default": 2,
                "type": {
                    "kind": "primitive",
                    "name": "qos()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "65535",
                    "oneliner": true
                },
                "desc": "允许的最大主题别名数，0 表示不支持主题别名。",
                "name": "max_topic_alias",
                "raw_default": 65535,
                "type": {
                    "kind": "primitive",
                    "name": "0..65535"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用对 MQTT 保留消息的支持。",
                "name": "retain_available",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用对 MQTT 通配符订阅的支持。",
                "name": "wildcard_subscription",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用对 MQTT 共享订阅的支持。",
                "name": "shared_subscription",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否启用对 MQTT 排它订阅的支持。",
                "name": "exclusive_subscription",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否为 MQTT v3.1.1/v3.1.0 客户端忽略投递自己发布的消息，类似于 MQTT 5.0 中的 <code>No Local</code> 订阅选项。",
                "name": "ignore_loop_deliver",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否以严格模式解析 MQTT 消息。\n当设置为 true 时，例如客户端 ID、主题名称等中的无效 utf8 字符串将导致客户端断开连接。",
                "name": "strict_mode",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "指定返回给客户端的响应信息。如果设置为 \"\"，则禁用此功能。仅适用于使用 MQTT 5.0 协议的客户端。",
                "name": "response_information",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "disabled",
                    "oneliner": true
                },
                "desc": "EMQX 要求客户端使用的保活时间，配置为 <code>disabled</code> 表示将使用客户端指定的保活时间。需要用到 MQTT 5.0 中的 <code>Server Keep Alive</code>，因此仅适用于使用 MQTT 5.0 协议的客户端。",
                "name": "server_keepalive",
                "raw_default": "disabled",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        },
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0.75",
                    "oneliner": true
                },
                "desc": "Broker 判定客户端保活超时使用的退避乘数。如果 EMQX 在 <code>Keep Alive * Backoff * 2</code> 秒内未收到任何报文，EMQX 将关闭当前连接。",
                "name": "keepalive_backoff",
                "raw_default": 0.75,
                "type": {
                    "kind": "primitive",
                    "name": "number()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "infinity",
                    "oneliner": true
                },
                "desc": "允许每个客户端建立的最大订阅数量。",
                "name": "max_subscriptions",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "1..inf"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
                "name": "upgrade_qos",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "32",
                    "oneliner": true
                },
                "desc": "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
                "name": "max_inflight",
                "raw_default": 32,
                "type": {
                    "kind": "primitive",
                    "name": "1..65535"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "QoS 1/2 消息的重新投递间隔。",
                "name": "retry_interval",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
                "name": "max_awaiting_rel",
                "raw_default": 100,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"300s\"",
                    "oneliner": true
                },
                "desc": "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
                "name": "await_rel_timeout",
                "raw_default": "300s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"2h\"",
                    "oneliner": true
                },
                "desc": "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
                "name": "session_expiry_interval",
                "raw_default": "2h",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
                "name": "max_mqueue_len",
                "raw_default": 1000,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "non_neg_integer()"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "disabled",
                    "oneliner": true
                },
                "desc": "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
                "name": "mqueue_priorities",
                "raw_default": "disabled",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "map()"
                        },
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "lowest",
                    "oneliner": true
                },
                "desc": "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
                "name": "mqueue_default_priority",
                "raw_default": "lowest",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "highest",
                        "lowest"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
                "name": "mqueue_store_qos0",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 <code>使用对端证书作为用户名</code>（<code>peer_cert_as_username</code>） 和 <code>使用对端证书作为客户端 ID</code>（<code>peer_cert_as_clientid</code>）。",
                "name": "use_username_as_clientid",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "disabled",
                    "oneliner": true
                },
                "desc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名。仅适用于 TLS 连接。\n目前支持配置为以下内容：\n- <code>cn</code>: 取证书的 CN 字段作为 Username\n- <code>dn</code>: 取证书的 DN 字段作为 Username\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容作为 Username\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式后作为 Username\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容的 MD5 值作为 Username",
                "name": "peer_cert_as_username",
                "raw_default": "disabled",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "disabled",
                        "cn",
                        "dn",
                        "crt",
                        "pem",
                        "md5"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "disabled",
                    "oneliner": true
                },
                "desc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接。\n目前支持配置为以下内容：\n- <code>cn</code>: 取证书的 CN 字段作为 Client ID\n- <code>dn</code>: 取证书的 DN 字段作为 Client ID\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容作为 Client ID\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式后作为 Client ID\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容的 MD5 值作为 Client ID",
                "name": "peer_cert_as_clientid",
                "raw_default": "disabled",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "disabled",
                        "cn",
                        "dn",
                        "crt",
                        "pem",
                        "md5"
                    ]
                }
            }
        ],
        "full_name": "broker:mqtt",
        "paths": [
            "mqtt"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the MQTT over QUIC listener.",
        "fields": [
            {
                "aliases": [],
                "desc": "证书文件。在 5.1 中会被废弃，使用 .ssl_options.certfile 代替。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "私钥文件。在 5.1 中会被废弃，使用 .ssl_options.keyfile 代替。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[\"TLS_AES_256_GCM_SHA384\", \"TLS_AES_128_GCM_SHA256\", \"TLS_CHACHA20_POLY1305_SHA256\"]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件，<code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\n注：QUIC 监听器不支持 tlsv1.3 的 ciphers",
                "name": "ciphers",
                "raw_default": [
                    "TLS_AES_256_GCM_SHA384",
                    "TLS_AES_128_GCM_SHA256",
                    "TLS_CHACHA20_POLY1305_SHA256"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "一个连接在被关闭之前可以空闲多长时间。0表示禁用。",
                "name": "idle_timeout",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"10s\"",
                    "oneliner": true
                },
                "desc": "一个握手在被丢弃之前可以空闲多长时间。",
                "name": "handshake_idle_timeout",
                "raw_default": "10s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "发送 PING 帧的频率，以保活连接. 设为 0 表示禁用。",
                "name": "keep_alive_interval",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "QUIC 传输层的 TLS 选项",
                "name": "ssl_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:listener_quic_ssl_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启停监听器。",
                "name": "enabled",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "14567",
                    "oneliner": true
                },
                "desc": "监听套接字的 IP 地址和端口。",
                "name": "bind",
                "raw_default": 14567,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "监听器接收池的大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "监听器允许的最大并发连接数。",
                "name": "max_connections",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "pos_integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "default",
                    "oneliner": true
                },
                "desc": "监听器所属的配置组。",
                "name": "zone",
                "raw_default": "default",
                "type": {
                    "kind": "primitive",
                    "name": "atom()"
                }
            },
            {
                "aliases": [],
                "desc": "速率限制类型",
                "name": "limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter:listener_fields"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "true",
                        "false",
                        "quick_deny_anonymous"
                    ]
                }
            }
        ],
        "full_name": "broker:mqtt_quic_listener",
        "paths": [
            "listeners.quic.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the MQTT over SSL listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启停监听器。",
                "name": "enabled",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8883",
                    "oneliner": true
                },
                "desc": "监听套接字的 IP 地址和端口。",
                "name": "bind",
                "raw_default": 8883,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "监听器接收池的大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "监听器允许的最大并发连接数。",
                "name": "max_connections",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "pos_integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "default",
                    "oneliner": true
                },
                "desc": "监听器所属的配置组。",
                "name": "zone",
                "raw_default": "default",
                "type": {
                    "kind": "primitive",
                    "name": "atom()"
                }
            },
            {
                "aliases": [],
                "desc": "速率限制类型",
                "name": "limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter:listener_fields"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "true",
                        "false",
                        "quick_deny_anonymous"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[\"allow all\"]",
                    "oneliner": true
                },
                "desc": "此监听器的访问控制规则。",
                "name": "access_rules",
                "raw_default": [
                    "allow all"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                "name": "proxy_protocol",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"3s\"",
                    "oneliner": true
                },
                "desc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                "name": "proxy_protocol_timeout",
                "raw_default": "3s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器认证重载。\n认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。\n执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行。",
                "name": "authentication",
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "struct",
                                "name": "authn-builtin_db:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mysql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-postgresql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:replica-set"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:sharded-cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:sentinel"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:get"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:post"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:hmac-based"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:public-key"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:jwks"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-scram-builtin_db:authentication"
                            }
                        ]
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "name": "tcp_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:tcp_opts"
                }
            },
            {
                "aliases": [],
                "name": "ssl_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:listener_ssl_opts"
                }
            }
        ],
        "full_name": "broker:mqtt_ssl_listener",
        "paths": [
            "listeners.ssl.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the MQTT over TCP listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启停监听器。",
                "name": "enabled",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1883",
                    "oneliner": true
                },
                "desc": "监听套接字的 IP 地址和端口。",
                "name": "bind",
                "raw_default": 1883,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "监听器接收池的大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "监听器允许的最大并发连接数。",
                "name": "max_connections",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "pos_integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "default",
                    "oneliner": true
                },
                "desc": "监听器所属的配置组。",
                "name": "zone",
                "raw_default": "default",
                "type": {
                    "kind": "primitive",
                    "name": "atom()"
                }
            },
            {
                "aliases": [],
                "desc": "速率限制类型",
                "name": "limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter:listener_fields"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "true",
                        "false",
                        "quick_deny_anonymous"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[\"allow all\"]",
                    "oneliner": true
                },
                "desc": "此监听器的访问控制规则。",
                "name": "access_rules",
                "raw_default": [
                    "allow all"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                "name": "proxy_protocol",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"3s\"",
                    "oneliner": true
                },
                "desc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                "name": "proxy_protocol_timeout",
                "raw_default": "3s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器认证重载。\n认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。\n执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行。",
                "name": "authentication",
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "struct",
                                "name": "authn-builtin_db:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mysql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-postgresql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:replica-set"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:sharded-cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:sentinel"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:get"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:post"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:hmac-based"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:public-key"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:jwks"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-scram-builtin_db:authentication"
                            }
                        ]
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "name": "tcp_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:tcp_opts"
                }
            }
        ],
        "full_name": "broker:mqtt_tcp_listener",
        "paths": [
            "listeners.tcp.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the MQTT over WebSocket listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启停监听器。",
                "name": "enabled",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8083",
                    "oneliner": true
                },
                "desc": "监听套接字的 IP 地址和端口。",
                "name": "bind",
                "raw_default": 8083,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "监听器接收池的大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "监听器允许的最大并发连接数。",
                "name": "max_connections",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "pos_integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "default",
                    "oneliner": true
                },
                "desc": "监听器所属的配置组。",
                "name": "zone",
                "raw_default": "default",
                "type": {
                    "kind": "primitive",
                    "name": "atom()"
                }
            },
            {
                "aliases": [],
                "desc": "速率限制类型",
                "name": "limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter:listener_fields"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "true",
                        "false",
                        "quick_deny_anonymous"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[\"allow all\"]",
                    "oneliner": true
                },
                "desc": "此监听器的访问控制规则。",
                "name": "access_rules",
                "raw_default": [
                    "allow all"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                "name": "proxy_protocol",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"3s\"",
                    "oneliner": true
                },
                "desc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                "name": "proxy_protocol_timeout",
                "raw_default": "3s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器认证重载。\n认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。\n执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行。",
                "name": "authentication",
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "struct",
                                "name": "authn-builtin_db:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mysql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-postgresql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:replica-set"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:sharded-cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:sentinel"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:get"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:post"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:hmac-based"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:public-key"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:jwks"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-scram-builtin_db:authentication"
                            }
                        ]
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "name": "tcp_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:tcp_opts"
                }
            },
            {
                "aliases": [],
                "name": "websocket",
                "type": {
                    "kind": "struct",
                    "name": "broker:ws_opts"
                }
            }
        ],
        "full_name": "broker:mqtt_ws_listener",
        "paths": [
            "listeners.ws.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the MQTT over WebSocket/SSL listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启停监听器。",
                "name": "enabled",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8084",
                    "oneliner": true
                },
                "desc": "监听套接字的 IP 地址和端口。",
                "name": "bind",
                "raw_default": 8084,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "监听器接收池的大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "监听器允许的最大并发连接数。",
                "name": "max_connections",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "pos_integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "default",
                    "oneliner": true
                },
                "desc": "监听器所属的配置组。",
                "name": "zone",
                "raw_default": "default",
                "type": {
                    "kind": "primitive",
                    "name": "atom()"
                }
            },
            {
                "aliases": [],
                "desc": "速率限制类型",
                "name": "limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter:listener_fields"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "true",
                        "false",
                        "quick_deny_anonymous"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[\"allow all\"]",
                    "oneliner": true
                },
                "desc": "此监听器的访问控制规则。",
                "name": "access_rules",
                "raw_default": [
                    "allow all"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                "name": "proxy_protocol",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"3s\"",
                    "oneliner": true
                },
                "desc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                "name": "proxy_protocol_timeout",
                "raw_default": "3s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器认证重载。\n认证配置可以是单个认证器实例，也可以是一个认证器数组组成的认证链。\n执行登录验证时（用户名、客户端 ID 等），将按配置的顺序执行。",
                "name": "authentication",
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "struct",
                                "name": "authn-builtin_db:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mysql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-postgresql:authentication"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:replica-set"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-mongodb:sharded-cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:standalone"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:cluster"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-redis:sentinel"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:get"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-http:post"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:hmac-based"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:public-key"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-jwt:jwks"
                            },
                            {
                                "kind": "struct",
                                "name": "authn-scram-builtin_db:authentication"
                            }
                        ]
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "name": "tcp_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:tcp_opts"
                }
            },
            {
                "aliases": [],
                "name": "ssl_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:listener_wss_opts"
                }
            },
            {
                "aliases": [],
                "name": "websocket",
                "type": {
                    "kind": "struct",
                    "name": "broker:ws_opts"
                }
            }
        ],
        "full_name": "broker:mqtt_wss_listener",
        "paths": [
            "listeners.wss.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Overload protection mechanism monitors the load of the system and temporarily\ndisables some features (such as accepting new connections) when the load is high.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否对系统过载做出反应。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1",
                    "oneliner": true
                },
                "desc": "高负载时，一些不重要的任务可能会延迟执行，在这里设置允许延迟的时间。",
                "name": "backoff_delay",
                "raw_default": 1,
                "type": {
                    "kind": "primitive",
                    "name": "0..inf"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "高负载时，跳过强制 GC。",
                "name": "backoff_gc",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "高负载时，跳过进程休眠。",
                "name": "backoff_hibernation",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "高负载时，拒绝新进来的客户端连接。",
                "name": "backoff_new_conn",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:overload_protection",
        "paths": [
            "overload_protection"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for the built-in storage engine of persistent messages.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "builtin",
                    "oneliner": true
                },
                "desc": "",
                "name": "type",
                "raw_default": "builtin",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "builtin"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "用于内建会话表的性能调优参数。",
                "name": "session",
                "type": {
                    "kind": "struct",
                    "name": "broker:persistent_table_mria_opts"
                }
            },
            {
                "aliases": [],
                "desc": "优化内置的会话消息表的配置。",
                "name": "session_messages",
                "type": {
                    "kind": "struct",
                    "name": "broker:persistent_table_mria_opts"
                }
            },
            {
                "aliases": [],
                "desc": "用于内建消息表的性能调优参数。",
                "name": "messages",
                "type": {
                    "kind": "struct",
                    "name": "broker:persistent_table_mria_opts"
                }
            }
        ],
        "full_name": "broker:persistent_session_builtin",
        "paths": [
            "persistent_session_store.backend"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Settings for message persistence.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用数据库存储有关持久会话的信息。\n这使得在节点停止时，可以将客户端连接迁移到另一个群集节点。",
                "name": "enabled",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "将持久会话数据保存在磁盘上。如果为 false 则存储在内存中。\n如开启， 持久会话数据可在集群重启后恢复。\n如关闭， 数据仅存储在内存中， 则在整个集群停止后丢失。",
                "name": "on_disc",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "在内存中保持一份数据的副本，以便更快地访问。",
                "name": "ram_cache",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  messages {ram_cache = \"false\"}\n  session {ram_cache = \"true\"}\n  session_messages {ram_cache = \"true\"}\n  type = \"builtin\"\n}\n",
                    "oneliner": false
                },
                "desc": "用于存储持久性会话和信息的数据库管理后端\n- `builtin`: 使用内置的数据库（mria）",
                "name": "backend",
                "raw_default": {
                    "messages": {
                        "ram_cache": "false"
                    },
                    "session": {
                        "ram_cache": "true"
                    },
                    "session_messages": {
                        "ram_cache": "true"
                    },
                    "type": "builtin"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "broker:persistent_session_builtin"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1h\"",
                    "oneliner": true
                },
                "desc": "如果重新启动时处理上一个会话的节点已停止，则未传递到持久会话的消息在垃圾收集之前会被存储。",
                "name": "max_retain_undelivered",
                "raw_default": "1h",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1h\"",
                    "oneliner": true
                },
                "desc": "将未送达的消息垃圾收集到持久会话的开始间隔。\n这会影响检查 \"max_retain_undelivered\"（最大保留未送达）的删除频率。",
                "name": "message_gc_interval",
                "raw_default": "1h",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "持久会话消息的临时数据垃圾收集的开始间隔。\n这不会影响持久会话消息的生命周期长度。",
                "name": "session_message_gc_interval",
                "raw_default": "1m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "broker:persistent_session_store",
        "paths": [
            "persistent_session_store"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Tuning options for the mria table.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "在内存中保持一份数据的副本，以便更快地访问。",
                "name": "ram_cache",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:persistent_table_mria_opts",
        "paths": [
            "persistent_session_store.backend.messages",
            "persistent_session_store.backend.session",
            "persistent_session_store.backend.session_messages"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Per group dispatch strategy for shared subscription",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "random",
                    "oneliner": true
                },
                "desc": "共享订阅的分发策略名称。\n- `random`：随机选择一个组内成员；\n- `round_robin`：循环选择下一个成员；\n- `round_robin_per_group`：在共享组内循环选择下一个成员；\n- `sticky`：使用上一次选中的成员；\n- `hash`：根据 ClientID 哈希映射到一个成员；\n- `local`：随机分发到节点本地成成员，如果本地成员不存在，则随机分发到任意一个成员。",
                "name": "strategy",
                "raw_default": "random",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "random",
                        "round_robin",
                        "round_robin_per_group",
                        "sticky",
                        "local",
                        "hash_topic",
                        "hash_clientid"
                    ]
                }
            }
        ],
        "full_name": "broker:shared_subscription_group",
        "paths": [
            "broker.shared_subscription_group.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Socket options for SSL clients.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "tlsv1.3",
                    "tlsv1.2",
                    "tlsv1.1",
                    "tlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx_tls_psk:lookup\"",
                    "oneliner": true
                },
                "desc": "用于查找预共享密钥（PSK）标识的 EMQX 内部回调。",
                "name": "user_lookup_fun",
                "raw_default": "emqx_tls_psk:lookup",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用 TLS。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                "examples": [
                    "disable"
                ],
                "name": "server_name_indication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disable"
                        },
                        {
                            "kind": "primitive",
                            "name": "string()"
                        }
                    ]
                }
            }
        ],
        "full_name": "broker:ssl_client_opts",
        "paths": [
            "authentication.$INDEX.ssl",
            "authorization.sources.$INDEX.ssl",
            "bridges.mqtt.$name.ssl",
            "bridges.webhook.$name.ssl",
            "cluster.etcd.ssl",
            "gateway.coap.authentication.ssl",
            "gateway.coap.listeners.dtls.$name.authentication.ssl",
            "gateway.coap.listeners.udp.$name.authentication.ssl",
            "gateway.exproto.authentication.ssl",
            "gateway.exproto.handler.ssl_options",
            "gateway.exproto.listeners.dtls.$name.authentication.ssl",
            "gateway.exproto.listeners.ssl.$name.authentication.ssl",
            "gateway.exproto.listeners.tcp.$name.authentication.ssl",
            "gateway.exproto.listeners.udp.$name.authentication.ssl",
            "gateway.lwm2m.authentication.ssl",
            "gateway.lwm2m.listeners.dtls.$name.authentication.ssl",
            "gateway.lwm2m.listeners.udp.$name.authentication.ssl",
            "gateway.mqttsn.authentication.ssl",
            "gateway.mqttsn.listeners.dtls.$name.authentication.ssl",
            "gateway.mqttsn.listeners.udp.$name.authentication.ssl",
            "gateway.stomp.authentication.ssl",
            "gateway.stomp.listeners.ssl.$name.authentication.ssl",
            "gateway.stomp.listeners.tcp.$name.authentication.ssl",
            "listeners.ssl.$name.authentication.$INDEX.ssl",
            "listeners.tcp.$name.authentication.$INDEX.ssl",
            "listeners.ws.$name.authentication.$INDEX.ssl",
            "listeners.wss.$name.authentication.$INDEX.ssl"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Enable/disable statistic data collection.\nStatistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用/禁用统计数据收集功能。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:stats",
        "paths": [
            "stats"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "发送 `$SYS` 主题的间隔时间。",
                "name": "sys_msg_interval",
                "raw_default": "1m",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "发送心跳系统消息的间隔时间，它包括：\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`",
                "name": "sys_heartbeat_interval",
                "raw_default": "30s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "客户端事件消息。",
                "name": "sys_event_messages",
                "type": {
                    "kind": "struct",
                    "name": "broker:event_names"
                }
            }
        ],
        "full_name": "broker:sys_topics",
        "paths": [
            "sys_topics"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Features related to system monitoring and introspection.",
        "fields": [
            {
                "aliases": [],
                "name": "vm",
                "type": {
                    "kind": "struct",
                    "name": "broker:sysmon_vm"
                }
            },
            {
                "aliases": [],
                "name": "os",
                "type": {
                    "kind": "struct",
                    "name": "broker:sysmon_os"
                }
            },
            {
                "aliases": [],
                "name": "top",
                "type": {
                    "kind": "struct",
                    "name": "broker:sysmon_top"
                }
            }
        ],
        "full_name": "broker:sysmon",
        "paths": [
            "sysmon"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60s\"",
                    "oneliner": true
                },
                "desc": "定期 CPU 检查的时间间隔。",
                "name": "cpu_check_interval",
                "raw_default": "60s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"80%\"",
                    "oneliner": true
                },
                "desc": "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                "name": "cpu_high_watermark",
                "raw_default": "80%",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:percent()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60%\"",
                    "oneliner": true
                },
                "desc": "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                "name": "cpu_low_watermark",
                "raw_default": "60%",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:percent()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60s\"",
                    "oneliner": true
                },
                "desc": "定期内存检查的时间间隔。",
                "name": "mem_check_interval",
                "raw_default": "60s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"70%\"",
                    "oneliner": true
                },
                "desc": "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                "name": "sysmem_high_watermark",
                "raw_default": "70%",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:percent()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5%\"",
                    "oneliner": true
                },
                "desc": "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                "name": "procmem_high_watermark",
                "raw_default": "5%",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:percent()"
                }
            }
        ],
        "full_name": "broker:sysmon_os",
        "paths": [
            "sysmon.os"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "This part of the configuration is responsible for monitoring\n the Erlang processes in the VM. This information can be sent to an external\n PostgreSQL database. This feature is inactive unless the PostgreSQL sink is configured.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "每个监视组的顶级进程数。",
                "name": "num_items",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"2s\"",
                    "oneliner": true
                },
                "desc": "指定应收集进程顶部的频率。",
                "name": "sample_interval",
                "raw_default": "2s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000000",
                    "oneliner": true
                },
                "desc": "当 VM 中的进程数超过此值时，停止收集数据。",
                "name": "max_procs",
                "raw_default": 1000000,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "收集数据点的 PostgreSQL 数据库的主机名。",
                "name": "db_hostname",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "5432",
                    "oneliner": true
                },
                "desc": "收集数据点的 PostgreSQL 数据库的端口。",
                "name": "db_port",
                "raw_default": 5432,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"system_monitor\"",
                    "oneliner": true
                },
                "desc": "PostgreSQL 数据库的用户名",
                "name": "db_username",
                "raw_default": "system_monitor",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"system_monitor_password\"",
                    "oneliner": true
                },
                "desc": "PostgreSQL 数据库的密码",
                "name": "db_password",
                "raw_default": "system_monitor_password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"postgres\"",
                    "oneliner": true
                },
                "desc": "PostgreSQL 数据库的数据库名",
                "name": "db_name",
                "raw_default": "postgres",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            }
        ],
        "full_name": "broker:sysmon_top",
        "paths": [
            "sysmon.top"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "定期进程限制检查的时间间隔。",
                "name": "process_check_interval",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"80%\"",
                    "oneliner": true
                },
                "desc": "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                "name": "process_high_watermark",
                "raw_default": "80%",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:percent()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60%\"",
                    "oneliner": true
                },
                "desc": "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                "name": "process_low_watermark",
                "raw_default": "60%",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:percent()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "disabled",
                    "oneliner": true
                },
                "desc": "当系统检测到某个 Erlang 进程垃圾回收占用过长时间，会触发一条带有 <code>long_gc</code> 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_gc</code> 的 MQTT 系统消息。",
                "name": "long_gc",
                "raw_default": "disabled",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"240ms\"",
                    "oneliner": true
                },
                "desc": "启用后，如果 Erlang VM 调度器出现某个任务占用时间过长时，会触发一条带有 'long_schedule' 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_schedule</code> 的 MQTT 系统消息。",
                "name": "long_schedule",
                "raw_default": "240ms",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"32MB\"",
                    "oneliner": true
                },
                "desc": "启用后，当一个 Erlang 进程申请了大量内存，系统会触发一条带有 <code>large_heap</code> 关键字的\nwarning 级别日志。同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
                "name": "large_heap",
                "raw_default": "32MB",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:bytesize()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用后，当用于集群接点之间 RPC 的连接过忙时，会触发一条带有 <code>busy_dist_port</code> 关键字的 warning 级别日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
                "name": "busy_dist_port",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "当一个系统接口（例如 TCP socket）过忙，会触发一条带有 <code>busy_port</code> 关键字的 warning 级别的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_port</code> 的 MQTT 系统消息。",
                "name": "busy_port",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:sysmon_vm",
        "paths": [
            "sysmon.vm"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "TCP listener options.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                "name": "active_n",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                "name": "backlog",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "连接的 TCP 发送超时。",
                "name": "send_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "如果发送超时，则关闭连接。",
                "name": "send_timeout_close",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "连接的 TCP 接收缓冲区（OS 内核）。",
                "examples": [
                    "2KB"
                ],
                "name": "recbuf",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "desc": "连接的 TCP 发送缓冲区（OS 内核）。",
                "examples": [
                    "4KB"
                ],
                "name": "sndbuf",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"4KB\"",
                    "oneliner": true
                },
                "desc": "驱动程序使用的用户空间缓冲区的大小。",
                "examples": [
                    "4KB"
                ],
                "name": "buffer",
                "raw_default": "4KB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1MB\"",
                    "oneliner": true
                },
                "desc": "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
                "name": "high_watermark",
                "raw_default": "1MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "连接的 TCP_NODELAY 标识",
                "name": "nodelay",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "连接的 SO_REUSEADDR 标识。",
                "name": "reuseaddr",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "broker:tcp_opts",
        "paths": [
            "gateway.exproto.listeners.ssl.$name.tcp_options",
            "gateway.exproto.listeners.tcp.$name.tcp_options",
            "gateway.stomp.listeners.ssl.$name.tcp_options",
            "gateway.stomp.listeners.tcp.$name.tcp_options",
            "listeners.ssl.$name.tcp_options",
            "listeners.tcp.$name.tcp_options",
            "listeners.ws.$name.tcp_options",
            "listeners.wss.$name.tcp_options"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Real-time filtering logs for the ClientID or Topic or IP for debugging.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "text",
                    "oneliner": true
                },
                "desc": "确定跟踪文件中有效负载格式的格式。<br/>\n`text`：基于文本的协议或纯文本协议。\n建议在有效负载为JSON编码时使用<br/>\n`hex`：二进制十六进制编码。当有效负载是自定义二进制协议时，建议使用此选项<br/>\n`hidden`：有效负载被模糊化为 `******`",
                "name": "payload_encode",
                "raw_default": "text",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "hex",
                        "text",
                        "hidden"
                    ]
                }
            }
        ],
        "full_name": "broker:trace",
        "paths": [
            "trace"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "WebSocket listener options.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"/mqtt\"",
                    "oneliner": true
                },
                "desc": "WebSocket 的 MQTT 协议路径。因此，EMQX Broker的WebSocket地址为：\n<code>ws://{ip}:{port}/mqtt</code>",
                "name": "mqtt_path",
                "raw_default": "/mqtt",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "multiple",
                    "oneliner": true
                },
                "desc": "WebSocket消息是否允许包含多个 MQTT 数据包。",
                "name": "mqtt_piggyback",
                "raw_default": "multiple",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "single",
                        "multiple"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "如果 <code>true</code>，则使用<code>zlib</code> 压缩 WebSocket 消息<br/>\n<code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
                "name": "compress",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"7200s\"",
                    "oneliner": true
                },
                "desc": "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。",
                "name": "idle_timeout",
                "raw_default": "7200s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "infinity",
                    "oneliner": true
                },
                "desc": "单个 MQTT 数据包的最大长度。",
                "name": "max_frame_size",
                "raw_default": "infinity",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
                "name": "fail_if_no_subprotocol",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\"",
                    "oneliner": true
                },
                "desc": "逗号分隔的 subprotocols 支持列表。",
                "name": "supported_subprotocols",
                "raw_default": "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:comma_separated_list()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
                "name": "check_origin_enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "If <code>false</code> and <code>check_origin_enable</code> is <code>true</code>, the server will reject requests that don't have <code>origin</code> HTTP header.",
                "name": "allow_origin_absence",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"http://localhost:18083, http://127.0.0.1:18083\"",
                    "oneliner": true
                },
                "desc": "允许的 origins 列表",
                "name": "check_origins",
                "raw_default": "http://localhost:18083, http://127.0.0.1:18083",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:comma_separated_binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"x-forwarded-for\"",
                    "oneliner": true
                },
                "desc": "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                "name": "proxy_address_header",
                "raw_default": "x-forwarded-for",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"x-forwarded-port\"",
                    "oneliner": true
                },
                "desc": "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                "name": "proxy_port_header",
                "raw_default": "x-forwarded-port",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "name": "deflate_opts",
                "type": {
                    "kind": "struct",
                    "name": "broker:deflate_opts"
                }
            }
        ],
        "full_name": "broker:ws_opts",
        "paths": [
            "listeners.ws.$name.websocket",
            "listeners.wss.$name.websocket"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "A `Zone` defines a set of configuration items (such as the maximum number of connections) that can be shared between multiple listeners.\n\n`Listener` can refer to a `Zone` through the configuration item <code>listener.\\<Protocol>.\\<Listener Name>.zone</code>.\n\nThe configs defined in the zones will override the global configs with the same key.\n\nFor example, given the following config:\n```\na {\n    b: 1, c: 1\n}\nzone.my_zone {\n  a {\n    b:2\n  }\n}\n```\n\nThe global config `a` is overridden by the configs `a` inside the zone `my_zone`.\n\nIf there is a listener using the zone `my_zone`, the value of config `a` will be: `{b:2, c: 1}`.\nNote that although the default value of `a.c` is `0`, the global value is used, i.e. configs in the zone have no default values. To override `a.c` one must configure it explicitly in the zone.\n\nAll the global configs that can be overridden in zones are:\n - `stats.*`\n - `mqtt.*`\n - `authorization.*`\n - `flapping_detect.*`\n - `force_shutdown.*`\n - `conn_congestion.*`\n - `force_gc.*`\n\n",
        "fields": [
            {
                "aliases": [],
                "name": "mqtt",
                "type": {
                    "kind": "struct",
                    "name": "zone:mqtt"
                }
            },
            {
                "aliases": [],
                "name": "stats",
                "type": {
                    "kind": "struct",
                    "name": "zone:stats"
                }
            },
            {
                "aliases": [],
                "name": "flapping_detect",
                "type": {
                    "kind": "struct",
                    "name": "zone:flapping_detect"
                }
            },
            {
                "aliases": [],
                "name": "force_shutdown",
                "type": {
                    "kind": "struct",
                    "name": "zone:force_shutdown"
                }
            },
            {
                "aliases": [],
                "name": "conn_congestion",
                "type": {
                    "kind": "struct",
                    "name": "zone:conn_congestion"
                }
            },
            {
                "aliases": [],
                "name": "force_gc",
                "type": {
                    "kind": "struct",
                    "name": "zone:force_gc"
                }
            },
            {
                "aliases": [],
                "name": "overload_protection",
                "type": {
                    "kind": "struct",
                    "name": "zone:overload_protection"
                }
            }
        ],
        "full_name": "broker:zone",
        "paths": [
            "zones.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "EMQX Dashboard 配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "Dashboard 监听器设置。监听器必须有唯一的端口号和IP地址的组合。\n例如，可以通过指定IP地址 0.0.0.0 来监听机器上给定端口上的所有配置的IP地址。\n或者，可以为每个监听器指定唯一的IP地址，但使用相同的端口。",
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "dashboard:listeners"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"admin\"",
                    "oneliner": true
                },
                "desc": "Dashboard 的默认用户名。",
                "name": "default_username",
                "raw_default": "admin",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"public\"",
                    "oneliner": true
                },
                "desc": "Dashboard 的默认密码，为了安全，应该尽快修改密码。\n当通过网页首次登录 Dashboard 并按提示修改成复杂密码后，此值就会失效。",
                "name": "default_password",
                "raw_default": "public",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"10s\"",
                    "oneliner": true
                },
                "desc": "Dashboard 中图表指标的时间间隔。必须小于60，且被60的整除，默认设置 10s。",
                "name": "sample_interval",
                "raw_default": "10s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_s()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60m\"",
                    "oneliner": true
                },
                "desc": "JWT token 过期时间。默认设置为 60 分钟。",
                "name": "token_expired_time",
                "raw_default": "60m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "支持跨域资源共享(CORS)，\n允许服务器指示任何来源(域名、协议或端口)，除了本服务器之外的任何浏览器应允许加载资源。",
                "name": "cors",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "en",
                    "oneliner": true
                },
                "desc": "设置 Swagger 多语言的版本，可为 en 或 zh。",
                "name": "i18n_lang",
                "raw_default": "en",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "en",
                        "zh"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "已废弃，请使用 api_key.bootstrap_file。",
                "name": "bootstrap_users_file",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "dashboard",
        "paths": [
            "dashboard"
        ],
        "tags": []
    },
    {
        "desc": "Dashboard 监听器(HTTP)配置。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "忽略或启用该监听器。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "18083",
                    "oneliner": true
                },
                "desc": "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
                "examples": [
                    [
                        48,
                        46,
                        48,
                        46,
                        48,
                        46,
                        48,
                        58,
                        49,
                        56,
                        48,
                        56,
                        51
                    ]
                ],
                "name": "bind",
                "raw_default": 18083,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "non_neg_integer()"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "20",
                    "oneliner": true
                },
                "desc": "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
                "name": "num_acceptors",
                "raw_default": 20,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "512",
                    "oneliner": true
                },
                "desc": "同时处理的最大连接数。",
                "name": "max_connections",
                "raw_default": 512,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "排队等待连接的队列的最大长度。",
                "name": "backlog",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"10s\"",
                    "oneliner": true
                },
                "desc": "Socket发送超时时间。",
                "name": "send_timeout",
                "raw_default": "10s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
                "name": "inet6",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                "name": "ipv6_v6only",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
                "name": "proxy_header",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "dashboard:http",
        "paths": [
            "dashboard.listeners.http"
        ],
        "tags": []
    },
    {
        "desc": "Dashboard 监听器(HTTPS)配置。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "忽略或启用该监听器。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "18084",
                    "oneliner": true
                },
                "desc": "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
                "examples": [
                    [
                        48,
                        46,
                        48,
                        46,
                        48,
                        46,
                        48,
                        58,
                        49,
                        56,
                        48,
                        56,
                        52
                    ]
                ],
                "name": "bind",
                "raw_default": 18084,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "non_neg_integer()"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:ip_port()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "20",
                    "oneliner": true
                },
                "desc": "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
                "name": "num_acceptors",
                "raw_default": 20,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "512",
                    "oneliner": true
                },
                "desc": "同时处理的最大连接数。",
                "name": "max_connections",
                "raw_default": 512,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "排队等待连接的队列的最大长度。",
                "name": "backlog",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"10s\"",
                    "oneliner": true
                },
                "desc": "Socket发送超时时间。",
                "name": "send_timeout",
                "raw_default": "10s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
                "name": "inet6",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                "name": "ipv6_v6only",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
                "name": "proxy_header",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "tlsv1.3",
                    "tlsv1.2",
                    "tlsv1.1",
                    "tlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx_tls_psk:lookup\"",
                    "oneliner": true
                },
                "desc": "用于查找预共享密钥（PSK）标识的 EMQX 内部回调。",
                "name": "user_lookup_fun",
                "raw_default": "emqx_tls_psk:lookup",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                "name": "dhfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                "name": "honor_cipher_order",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                "name": "client_renegotiation",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "握手完成所允许的最长时间",
                "name": "handshake_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "dashboard:https",
        "paths": [
            "dashboard.listeners.https"
        ],
        "tags": []
    },
    {
        "desc": "Dashboard 监听器配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "TCP listeners",
                "name": "http",
                "type": {
                    "kind": "struct",
                    "name": "dashboard:http"
                }
            },
            {
                "aliases": [],
                "desc": "SSL listeners",
                "name": "https",
                "type": {
                    "kind": "struct",
                    "name": "dashboard:https"
                }
            }
        ],
        "full_name": "dashboard:listeners",
        "paths": [
            "dashboard.listeners"
        ],
        "tags": []
    },
    {
        "desc": "External hook (exhook) configuration.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "ExHook 服务器列表",
                "name": "servers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "struct",
                        "name": "exhook:server"
                    },
                    "kind": "array"
                }
            }
        ],
        "full_name": "exhook",
        "paths": [
            "exhook"
        ],
        "tags": []
    },
    {
        "desc": "gRPC server configuration.",
        "fields": [
            {
                "aliases": [],
                "desc": "ExHook 服务器名称",
                "examples": [
                    "default"
                ],
                "name": "name",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "开启这个 Exhook 服务器",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "gRPC 服务器地址",
                "examples": [
                    "http://127.0.0.1:9000"
                ],
                "name": "url",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "gRPC 服务器请求超时时间",
                "name": "request_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "deny",
                    "oneliner": true
                },
                "desc": "当 gRPC 请求失败后的操作",
                "name": "failed_action",
                "raw_default": "deny",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "deny",
                        "ignore"
                    ]
                }
            },
            {
                "aliases": [],
                "name": "ssl",
                "type": {
                    "kind": "struct",
                    "name": "exhook:ssl_conf"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{keepalive = true, nodelay = true}",
                    "oneliner": true
                },
                "name": "socket_options",
                "raw_default": {
                    "keepalive": true,
                    "nodelay": true
                },
                "type": {
                    "kind": "struct",
                    "name": "exhook:socket_options"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60s\"",
                    "oneliner": true
                },
                "desc": "自动重连到 gRPC 服务器的设置。\n当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
                "name": "auto_reconnect",
                "raw_default": "60s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "false"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "gRPC 客户端进程池大小",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            }
        ],
        "full_name": "exhook:server",
        "paths": [
            "exhook.servers.$INDEX"
        ],
        "tags": []
    },
    {
        "desc": "连接套接字设置",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "当没有其他数据交换时，是否向连接的对端套接字定期的发送探测包。如果另一端没有响应，则认为连接断开，并向控制进程发送错误消息",
                "name": "keepalive",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "如果为 true，则为套接字设置 TCP_NODELAY 选项，这意味着会立即发送数据包",
                "name": "nodelay",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "套接字的最小接收缓冲区大小",
                "examples": [
                    "64KB"
                ],
                "name": "recbuf",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "desc": "套接字的最小发送缓冲区大小",
                "examples": [
                    "16KB"
                ],
                "name": "sndbuf",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            }
        ],
        "full_name": "exhook:socket_options",
        "paths": [
            "exhook.servers.$INDEX.socket_options"
        ],
        "tags": []
    },
    {
        "desc": "SSL client configuration.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "tlsv1.3",
                    "tlsv1.2",
                    "tlsv1.1",
                    "tlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用 TLS。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                "examples": [
                    "disable"
                ],
                "name": "server_name_indication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disable"
                        },
                        {
                            "kind": "primitive",
                            "name": "string()"
                        }
                    ]
                }
            }
        ],
        "full_name": "exhook:ssl_conf",
        "paths": [
            "exhook.servers.$INDEX.ssl"
        ],
        "tags": []
    },
    {
        "desc": "ClientInfo override.",
        "fields": [
            {
                "aliases": [],
                "desc": "username 重写模板",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "password 重写模板",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "clientid 重写模板",
                "name": "clientid",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "gateway:clientinfo_override",
        "paths": [
            "gateway.coap.clientinfo_override",
            "gateway.exproto.clientinfo_override",
            "gateway.lwm2m.clientinfo_override",
            "gateway.mqttsn.clientinfo_override",
            "gateway.stomp.clientinfo_override"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "The CoAP protocol gateway provides EMQX with the access capability of the CoAP protocol.\nIt allows publishing, subscribing, and receiving messages to EMQX in accordance\nwith a certain defined CoAP message format.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "CoAP 网关要求客户端的最小心跳间隔时间。\n当 <code>connection_required</code> 开启后，该参数用于检查客户端连接是否存活",
                "name": "heartbeat",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否开启连接模式。\n连接模式是非标准协议的功能。它维护 CoAP 客户端上线、认证、和连接状态的保持",
                "name": "connection_required",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "qos",
                    "oneliner": true
                },
                "desc": "投递给 CoAP 客户端的通知消息类型。当客户端 Observe 一个资源（或订阅某个主题）时，网关会向客户端推送新产生的消息。其消息类型可设置为：<br/>\n  - non: 不需要客户端返回确认消息;<br/>\n  - con: 需要客户端返回一个确认消息;<br/>\n  - qos: 取决于消息的 QoS 等级; QoS 0 会以 `non` 类型下发，QoS 1/2 会以 `con` 类型下发",
                "name": "notify_type",
                "raw_default": "qos",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "non",
                        "con",
                        "qos"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "coap",
                    "oneliner": true
                },
                "desc": "客户端订阅请求的默认 QoS 等级。\n当 CoAP 客户端发起订阅请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/>\n  - qos0、 qos1、qos2: 设置为固定的 QoS 等级<br/>\n  - coap: 依据订阅操作的 CoAP 报文类型来动态决定<br/>\n    * 当订阅请求为 `non-confirmable` 类型时，取值为 qos0<br/>\n    * 当订阅请求为 `confirmable` 类型时，取值为 qos1",
                "name": "subscribe_qos",
                "raw_default": "coap",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "qos0",
                        "qos1",
                        "qos2",
                        "coap"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "coap",
                    "oneliner": true
                },
                "desc": "客户端发布请求的默认 QoS 等级。\n当 CoAP 客户端发起发布请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br>\n  - qos0、qos1、qos2: 设置为固定的 QoS 等级<br/>\n  - coap: 依据发布操作的 CoAP 报文类型来动态决定<br/>\n    * 当发布请求为 `non-confirmable` 类型时，取值为 qos0<br/>\n    * 当发布请求为 `confirmable` 类型时，取值为 qos1",
                "name": "publish_qos",
                "raw_default": "coap",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "qos0",
                        "qos1",
                        "qos2",
                        "coap"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "配置 UDP 类型的监听器。",
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "gateway:udp_listeners"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该网关",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端统计",
                "name": "enable_stats",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
                "name": "idle_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "ClientInfo 重写。",
                "name": "clientinfo_override",
                "type": {
                    "kind": "struct",
                    "name": "gateway:clientinfo_override"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            }
        ],
        "full_name": "gateway:coap",
        "paths": [
            "gateway.coap"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the DTLS listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "Acceptor 进程池大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "name": "udp_options",
                "type": {
                    "kind": "struct",
                    "name": "gateway:udp_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该监听器。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器绑定的 IP 地址或端口。",
                "name": "bind",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_gateway_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接数。",
                "name": "max_connections",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接速率。",
                "name": "max_conn_rate",
                "raw_default": 1000,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                "name": "mountpoint",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                "name": "access_rules",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "desc": "DTLS Socket 配置",
                "name": "dtls_options",
                "type": {
                    "kind": "struct",
                    "name": "gateway:dtls_opts"
                }
            }
        ],
        "full_name": "gateway:dtls_listener",
        "paths": [
            "gateway.coap.listeners.dtls.$name",
            "gateway.exproto.listeners.dtls.$name",
            "gateway.lwm2m.listeners.dtls.$name",
            "gateway.mqttsn.listeners.dtls.$name"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the DTLS protocol.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[dtlsv1.2, dtlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "dtlsv1.2",
                    "dtlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx_tls_psk:lookup\"",
                    "oneliner": true
                },
                "desc": "用于查找预共享密钥（PSK）标识的 EMQX 内部回调。",
                "name": "user_lookup_fun",
                "raw_default": "emqx_tls_psk:lookup",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                "name": "dhfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                "name": "fail_if_no_peer_cert",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                "name": "honor_cipher_order",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                "name": "client_renegotiation",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "握手完成所允许的最长时间",
                "name": "handshake_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "内存使用调优。如果启用，将在TLS/SSL握手完成后立即执行垃圾回收。TLS/SSL握手建立后立即进行GC。",
                "name": "gc_after_handshake",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否为该监听器启用 CRL 检查。",
                "name": "enable_crl_check",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "gateway:dtls_opts",
        "paths": [
            "gateway.coap.listeners.dtls.$name.dtls_options",
            "gateway.exproto.listeners.dtls.$name.dtls_options",
            "gateway.lwm2m.listeners.dtls.$name.dtls_options",
            "gateway.mqttsn.listeners.dtls.$name.dtls_options"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for EMQX extension protocol (exproto).",
        "fields": [
            {
                "aliases": [],
                "desc": "配置 ExProto 网关需要启动的 <code>ConnectionAdapter</code> 服务。\n该服务用于提供客户端的认证、发布、订阅和数据下行等功能。",
                "name": "server",
                "type": {
                    "kind": "struct",
                    "name": "gateway:exproto_grpc_server"
                }
            },
            {
                "aliases": [],
                "desc": "配置 ExProto 网关需要请求的 <code>ConnectionHandler</code> 服务地址。\n该服务用于给 ExProto 提供客户端的 Socket 事件处理、字节解码、订阅消息接收等功能。",
                "name": "handler",
                "type": {
                    "kind": "struct",
                    "name": "gateway:exproto_grpc_handler"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器配置。",
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "gateway:tcp_udp_listeners"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该网关",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端统计",
                "name": "enable_stats",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
                "name": "idle_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "ClientInfo 重写。",
                "name": "clientinfo_override",
                "type": {
                    "kind": "struct",
                    "name": "gateway:clientinfo_override"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            }
        ],
        "full_name": "gateway:exproto",
        "paths": [
            "gateway.exproto"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the exproto gRPC connection handler.",
        "fields": [
            {
                "aliases": [],
                "desc": "对端 gRPC 服务器地址。",
                "name": "address",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "gRPC 客户端的 SSL 配置。",
                "name": "ssl_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "gateway:exproto_grpc_handler",
        "paths": [
            "gateway.exproto.handler"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the exproto gRPC server.",
        "fields": [
            {
                "aliases": [],
                "desc": "服务监听地址和端口。",
                "name": "bind",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_gateway_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "服务 SSL 配置。",
                "name": "ssl_options",
                "type": {
                    "kind": "struct",
                    "name": "gateway:ssl_server_opts"
                }
            }
        ],
        "full_name": "gateway:exproto_grpc_server",
        "paths": [
            "gateway.exproto.server"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "EMQX Gateway configuration root.",
        "fields": [
            {
                "aliases": [],
                "desc": "Stomp 网关配置。当前实现支持 v1.2/1.1/1.0 协议版本",
                "name": "stomp",
                "type": {
                    "kind": "struct",
                    "name": "gateway:stomp"
                }
            },
            {
                "aliases": [],
                "desc": "MQTT-SN 网关配置。当前实现仅支持 v1.2 版本",
                "name": "mqttsn",
                "type": {
                    "kind": "struct",
                    "name": "gateway:mqttsn"
                }
            },
            {
                "aliases": [],
                "desc": "CoAP 网关配置。\n该网关的实现基于 RFC-7252 和 https://core-wg.github.io/coap-pubsub/draft-ietf-core-pubsub.html",
                "name": "coap",
                "type": {
                    "kind": "struct",
                    "name": "gateway:coap"
                }
            },
            {
                "aliases": [],
                "desc": "LwM2M 网关配置。仅支持 v1.0.1 协议。",
                "name": "lwm2m",
                "type": {
                    "kind": "struct",
                    "name": "gateway:lwm2m"
                }
            },
            {
                "aliases": [],
                "desc": "ExProto 网关",
                "name": "exproto",
                "type": {
                    "kind": "struct",
                    "name": "gateway:exproto"
                }
            }
        ],
        "full_name": "gateway",
        "paths": [
            "gateway"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "The LwM2M protocol gateway.",
        "fields": [
            {
                "aliases": [],
                "desc": "LwM2M Resource 定义的 XML 文件目录路径。",
                "examples": [
                    "/etc/emqx/lwm2m_xml"
                ],
                "name": "xml_dir",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "允许 LwM2M 客户端允许设置的心跳最小值。",
                "name": "lifetime_min",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"86400s\"",
                    "oneliner": true
                },
                "desc": "允许 LwM2M 客户端允许设置的心跳最大值。",
                "name": "lifetime_max",
                "raw_default": "86400s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"22s\"",
                    "oneliner": true
                },
                "desc": "在QMode模式下，LwM2M网关认为网络链接有效的时间窗口的值。\n例如，在收到客户端的更新信息后，在这个时间窗口内的任何信息都会直接发送到LwM2M客户端，而超过这个时间窗口的所有信息都会暂时储存在内存中。",
                "name": "qmode_time_window",
                "raw_default": "22s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration_s()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "自动 Observe REGISTER 数据包的 Object 列表。",
                "name": "auto_observe",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "contains_object_list",
                    "oneliner": true
                },
                "desc": "发布UPDATE事件消息的策略。<br/>\n  - always: 只要收到 UPDATE 请求，就发送更新事件。<br/>\n  - contains_object_list: 仅当 UPDATE 请求携带 Object 列表时才发送更新事件。",
                "name": "update_msg_publish_condition",
                "raw_default": "contains_object_list",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "always",
                        "contains_object_list"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "LwM2M 网关订阅/发布消息的主题映射配置。",
                "name": "translators",
                "type": {
                    "kind": "struct",
                    "name": "gateway:lwm2m_translators"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"lwm2m/${endpoint_name}/\"",
                    "oneliner": true
                },
                "desc": "",
                "name": "mountpoint",
                "raw_default": "lwm2m/${endpoint_name}/",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "配置 UDP 类型的监听器。",
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "gateway:udp_listeners"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该网关",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端统计",
                "name": "enable_stats",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
                "name": "idle_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "ClientInfo 重写。",
                "name": "clientinfo_override",
                "type": {
                    "kind": "struct",
                    "name": "gateway:clientinfo_override"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            }
        ],
        "full_name": "gateway:lwm2m",
        "paths": [
            "gateway.lwm2m"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "MQTT topics that correspond to LwM2M events.",
        "fields": [
            {
                "aliases": [],
                "desc": "下行命令主题。\n对于每个成功上线的新 LwM2M 客户端，网关会创建一个订阅关系来接收下行消息并将其发送给客户端。",
                "name": "command",
                "type": {
                    "kind": "struct",
                    "name": "gateway:translator"
                }
            },
            {
                "aliases": [],
                "desc": "用于网关发布来自 LwM2M 客户端的确认事件的主题。",
                "name": "response",
                "type": {
                    "kind": "struct",
                    "name": "gateway:translator"
                }
            },
            {
                "aliases": [],
                "desc": "用于发布来自 LwM2M 客户端的通知事件的主题。\n在成功 Observe 到 LwM2M 客户端的资源后，如果客户端报告任何资源状态的变化，网关将通过该主题发送通知事件。",
                "name": "notify",
                "type": {
                    "kind": "struct",
                    "name": "gateway:translator"
                }
            },
            {
                "aliases": [],
                "desc": "用于发布来自 LwM2M 客户端的注册事件的主题。",
                "name": "register",
                "type": {
                    "kind": "struct",
                    "name": "gateway:translator"
                }
            },
            {
                "aliases": [],
                "desc": "用于发布来自LwM2M客户端的更新事件的主题。",
                "name": "update",
                "type": {
                    "kind": "struct",
                    "name": "gateway:translator"
                }
            }
        ],
        "full_name": "gateway:lwm2m_translators",
        "paths": [
            "gateway.lwm2m.translators"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "The MQTT-SN (MQTT for Sensor Networks) protocol gateway.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "1",
                    "oneliner": true
                },
                "desc": "MQTT-SN 网关 ID。\n当 <code>broadcast</code> 打开时，MQTT-SN 网关会使用该 ID 来广播 ADVERTISE 消息",
                "name": "gateway_id",
                "raw_default": 1,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否周期性广播 ADVERTISE 消息",
                "name": "broadcast",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否允许无连接的客户端发送 QoS 等于 -1 的消息。\n该功能主要用于支持轻量的 MQTT-SN 客户端实现，它不会向网关建立连接，注册主题，也不会发起订阅；它只使用 QoS 为 -1 来发布消息",
                "name": "enable_qos3",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "在会话被重用后，网关是否主动向客户端注册对已订阅主题名称",
                "name": "subs_resume",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "预定义主题列表。\n预定义的主题列表，是一组 主题 ID 和 主题名称 的映射关系。使用预先定义的主题列表，可以减少 MQTT-SN 客户端和网关对于固定主题的注册请求",
                "name": "predefined",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "struct",
                        "name": "gateway:mqttsn_predefined"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "配置 UDP 类型的监听器。",
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "gateway:udp_listeners"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该网关",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端统计",
                "name": "enable_stats",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
                "name": "idle_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "ClientInfo 重写。",
                "name": "clientinfo_override",
                "type": {
                    "kind": "struct",
                    "name": "gateway:clientinfo_override"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            }
        ],
        "full_name": "gateway:mqttsn",
        "paths": [
            "gateway.mqttsn"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "The pre-defined topic name corresponding to the pre-defined topic\nID of N.\n\nNote: the pre-defined topic ID of 0 is reserved.",
        "fields": [
            {
                "aliases": [],
                "desc": "主题 ID。范围：1-65535",
                "name": "id",
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "主题名称。注：不支持通配符",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "gateway:mqttsn_predefined",
        "paths": [
            "gateway.mqttsn.predefined.$INDEX"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the SSL listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "Acceptor 进程池大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "TCP Socket 配置。",
                "name": "tcp_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:tcp_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                "name": "proxy_protocol",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
                "name": "proxy_protocol_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该监听器。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器绑定的 IP 地址或端口。",
                "name": "bind",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_gateway_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接数。",
                "name": "max_connections",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接速率。",
                "name": "max_conn_rate",
                "raw_default": 1000,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                "name": "mountpoint",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                "name": "access_rules",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "desc": "SSL Socket 配置。",
                "name": "ssl_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:listener_ssl_opts"
                }
            }
        ],
        "full_name": "gateway:ssl_listener",
        "paths": [
            "gateway.exproto.listeners.ssl.$name",
            "gateway.stomp.listeners.ssl.$name"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "SSL configuration for the server.",
        "fields": [
            {
                "aliases": [],
                "desc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "PEM格式的私钥文件。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "verify_none",
                    "oneliner": true
                },
                "desc": "启用或禁用对等验证。",
                "name": "verify",
                "raw_default": "verify_none",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "verify_peer",
                        "verify_none"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用 TLS 会话重用。",
                "name": "reuse_sessions",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                "name": "depth",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                "examples": [
                    ""
                ],
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                    "oneliner": true
                },
                "desc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                "name": "versions",
                "raw_default": [
                    "tlsv1.3",
                    "tlsv1.2",
                    "tlsv1.1",
                    "tlsv1"
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                "name": "ciphers",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx_tls_psk:lookup\"",
                    "oneliner": true
                },
                "desc": "用于查找预共享密钥（PSK）标识的 EMQX 内部回调。",
                "name": "user_lookup_fun",
                "raw_default": "emqx_tls_psk:lookup",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                "name": "secure_renegotiate",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": " 在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                "name": "hibernate_after",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                "name": "dhfile",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                "name": "fail_if_no_peer_cert",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                "name": "honor_cipher_order",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                "name": "client_renegotiation",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "握手完成所允许的最长时间",
                "name": "handshake_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "gateway:ssl_server_opts",
        "paths": [
            "gateway.exproto.server.ssl_options"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "The STOMP protocol gateway provides EMQX with the ability to access STOMP\n(Simple (or Streaming) Text Orientated Messaging Protocol) protocol.",
        "fields": [
            {
                "aliases": [],
                "name": "frame",
                "type": {
                    "kind": "struct",
                    "name": "gateway:stomp_frame"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "",
                "name": "mountpoint",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "配置 TCP 类型的监听器。",
                "name": "listeners",
                "type": {
                    "kind": "struct",
                    "name": "gateway:tcp_listeners"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该网关",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启客户端统计",
                "name": "enable_stats",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
                "name": "idle_timeout",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "ClientInfo 重写。",
                "name": "clientinfo_override",
                "type": {
                    "kind": "struct",
                    "name": "gateway:clientinfo_override"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            }
        ],
        "full_name": "gateway:stomp",
        "paths": [
            "gateway.stomp"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Size limits for the STOMP frames.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "允许的 Header 最大数量",
                "name": "max_headers",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "允许的 Header 字符串的最大长度",
                "name": "max_headers_length",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "65536",
                    "oneliner": true
                },
                "desc": "允许的 Stomp 报文 Body 的最大字节数",
                "name": "max_body_length",
                "raw_default": 65536,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            }
        ],
        "full_name": "gateway:stomp_frame",
        "paths": [
            "gateway.stomp.frame"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the TCP listener.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "Acceptor 进程池大小。",
                "name": "acceptors",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "TCP Socket 配置。",
                "name": "tcp_options",
                "type": {
                    "kind": "struct",
                    "name": "broker:tcp_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                "name": "proxy_protocol",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
                "name": "proxy_protocol_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该监听器。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器绑定的 IP 地址或端口。",
                "name": "bind",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_gateway_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接数。",
                "name": "max_connections",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接速率。",
                "name": "max_conn_rate",
                "raw_default": 1000,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                "name": "mountpoint",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                "name": "access_rules",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            }
        ],
        "full_name": "gateway:tcp_listener",
        "paths": [
            "gateway.exproto.listeners.tcp.$name",
            "gateway.stomp.listeners.tcp.$name"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the TCP listeners.",
        "fields": [
            {
                "aliases": [],
                "desc": "",
                "name": "tcp",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:tcp_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "",
                "name": "ssl",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:ssl_listener"
                    }
                }
            }
        ],
        "full_name": "gateway:tcp_listeners",
        "paths": [
            "gateway.stomp.listeners"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the listeners.",
        "fields": [
            {
                "aliases": [],
                "desc": "",
                "name": "tcp",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:tcp_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "",
                "name": "ssl",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:ssl_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "",
                "name": "udp",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:udp_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "",
                "name": "dtls",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:dtls_listener"
                    }
                }
            }
        ],
        "full_name": "gateway:tcp_udp_listeners",
        "paths": [
            "gateway.exproto.listeners"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "MQTT topic that corresponds to a particular type of event.",
        "fields": [
            {
                "aliases": [],
                "desc": "主题名称",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "QoS 等级",
                "name": "qos",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "qos()"
                }
            }
        ],
        "full_name": "gateway:translator",
        "paths": [
            "gateway.lwm2m.translators.command",
            "gateway.lwm2m.translators.notify",
            "gateway.lwm2m.translators.register",
            "gateway.lwm2m.translators.response",
            "gateway.lwm2m.translators.update"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the UDP listener.",
        "fields": [
            {
                "aliases": [],
                "name": "udp_options",
                "type": {
                    "kind": "struct",
                    "name": "gateway:udp_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否启用该监听器。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "监听器绑定的 IP 地址或端口。",
                "name": "bind",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_gateway_schema:ip_port()"
                        },
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1024",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接数。",
                "name": "max_connections",
                "raw_default": 1024,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1000",
                    "oneliner": true
                },
                "desc": "监听器支持的最大连接速率。",
                "name": "max_conn_rate",
                "raw_default": 1000,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "网关的认证器配置，对该网关下所以的监听器生效。如果每个监听器需要配置不同的认证器，需要配置监听器下的 <code>authentication</code> 字段。",
                "examples": {
                    "jwt": {
                        "summary": "JWT authentication",
                        "value": {
                            "algorithm": "hmac-based",
                            "mechanism": "jwt",
                            "secret": "mysecret",
                            "secret_base64_encoded": false,
                            "use_jwks": false,
                            "verify_claims": {
                                "username": "${username}"
                            }
                        }
                    },
                    "password_based:built_in_database": {
                        "summary": "Built-in password_based authentication",
                        "value": {
                            "backend": "built_in_database",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "user_id_type": "username"
                        }
                    },
                    "password_based:http": {
                        "summary": "password_based authentication through external HTTP API",
                        "value": {
                            "backend": "http",
                            "body": {
                                "password": "${password}",
                                "username": "${username}"
                            },
                            "connect_timeout": 5000,
                            "enable_pipelining": 100,
                            "headers": {
                                "content-type": "application/json"
                            },
                            "mechanism": "password_based",
                            "method": "post",
                            "pool_size": 8,
                            "request_timeout": 5000,
                            "ssl": {
                                "enable": false
                            },
                            "url": "http://127.0.0.1:18083"
                        }
                    },
                    "password_based:mongodb": {
                        "summary": "password_based authentication with MongoDB backend",
                        "value": {
                            "backend": "mongodb",
                            "collection": "users",
                            "database": "example",
                            "filter": {
                                "username": "${username}"
                            },
                            "is_superuser_field": "is_superuser",
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "password_hash_field": "password_hash",
                            "salt_field": "salt",
                            "server": "127.0.0.1:27017"
                        }
                    },
                    "password_based:redis": {
                        "summary": "password_based authentication with Redis backend",
                        "value": {
                            "backend": "redis",
                            "cmd": "HMGET ${username} password_hash salt",
                            "database": 0,
                            "mechanism": "password_based",
                            "password_hash_algorithm": {
                                "name": "sha256",
                                "salt_position": "suffix"
                            },
                            "redis_type": "single",
                            "server": "127.0.0.1:6379"
                        }
                    }
                },
                "name": "authentication",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-builtin_db:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mysql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-postgresql:authentication"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:replica-set"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-mongodb:sharded-cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:standalone"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:cluster"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-redis:sentinel"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:get"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-http:post"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:hmac-based"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:public-key"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-jwt:jwks"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-scram-builtin_db:authentication"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                "name": "enable_authn",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                "name": "mountpoint",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                "name": "access_rules",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "string()"
                    },
                    "kind": "array"
                }
            }
        ],
        "full_name": "gateway:udp_listener",
        "paths": [
            "gateway.coap.listeners.udp.$name",
            "gateway.exproto.listeners.udp.$name",
            "gateway.lwm2m.listeners.udp.$name",
            "gateway.mqttsn.listeners.udp.$name"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the UDP listeners.",
        "fields": [
            {
                "aliases": [],
                "desc": "",
                "name": "udp",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:udp_listener"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "",
                "name": "dtls",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "gateway:dtls_listener"
                    }
                }
            }
        ],
        "full_name": "gateway:udp_listeners",
        "paths": [
            "gateway.coap.listeners",
            "gateway.lwm2m.listeners",
            "gateway.mqttsn.listeners"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the UDP sockets.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                "name": "active_n",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Socket 在内核空间接收缓冲区的大小。",
                "name": "recbuf",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "desc": "Socket 在内核空间发送缓冲区的大小。",
                "name": "sndbuf",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "desc": "Socket 在用户空间的缓冲区大小。",
                "name": "buffer",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_gateway_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "允许重用本地处于 TIME_WAIT 的端口号。",
                "name": "reuseaddr",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "gateway:udp_opts",
        "paths": [
            "gateway.coap.listeners.dtls.$name.udp_options",
            "gateway.coap.listeners.udp.$name.udp_options",
            "gateway.exproto.listeners.dtls.$name.udp_options",
            "gateway.exproto.listeners.udp.$name.udp_options",
            "gateway.lwm2m.listeners.dtls.$name.udp_options",
            "gateway.lwm2m.listeners.udp.$name.udp_options",
            "gateway.mqttsn.listeners.dtls.$name.udp_options",
            "gateway.mqttsn.listeners.udp.$name.udp_options"
        ],
        "tags": [
            "Gateway"
        ]
    },
    {
        "desc": "Settings for the bucket.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "桶的令牌生成速率",
                "name": "rate",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:rate()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "该令牌桶的容量",
                "name": "capacity",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:capacity()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0\"",
                    "oneliner": true
                },
                "desc": "桶中的初始令牌数",
                "name": "initial",
                "raw_default": "0",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:initial()"
                }
            }
        ],
        "full_name": "limiter:bucket_infinity",
        "paths": [
            "listeners.quic.$name.limiter.bytes_in",
            "listeners.quic.$name.limiter.message_in",
            "listeners.quic.$name.limiter.message_routing",
            "listeners.ssl.$name.limiter.bytes_in",
            "listeners.ssl.$name.limiter.message_in",
            "listeners.ssl.$name.limiter.message_routing",
            "listeners.tcp.$name.limiter.bytes_in",
            "listeners.tcp.$name.limiter.message_in",
            "listeners.tcp.$name.limiter.message_routing",
            "listeners.ws.$name.limiter.bytes_in",
            "listeners.ws.$name.limiter.message_in",
            "listeners.ws.$name.limiter.message_routing",
            "listeners.wss.$name.limiter.bytes_in",
            "listeners.wss.$name.limiter.message_in",
            "listeners.wss.$name.limiter.message_routing"
        ],
        "tags": []
    },
    {
        "desc": "Settings for the bucket.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1000/s\"",
                    "oneliner": true
                },
                "desc": "桶的令牌生成速率",
                "name": "rate",
                "raw_default": "1000/s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:rate()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1000\"",
                    "oneliner": true
                },
                "desc": "该令牌桶的容量",
                "name": "capacity",
                "raw_default": "1000",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:capacity()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0\"",
                    "oneliner": true
                },
                "desc": "桶中的初始令牌数",
                "name": "initial",
                "raw_default": "0",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:initial()"
                }
            }
        ],
        "full_name": "limiter:bucket_limit",
        "paths": [
            "listeners.quic.$name.limiter.connection",
            "listeners.ssl.$name.limiter.connection",
            "listeners.tcp.$name.limiter.connection",
            "listeners.ws.$name.limiter.connection",
            "listeners.wss.$name.limiter.connection"
        ],
        "tags": []
    },
    {
        "desc": "Fields of the client level.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "bytes_in",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "message_in",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                "name": "connection",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                "name": "message_routing",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "EMQX 内部功能所用限制器。",
                "name": "internal",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            }
        ],
        "full_name": "limiter:client_fields",
        "paths": [
            "limiter.client"
        ],
        "tags": []
    },
    {
        "desc": "Settings for the client in bucket level.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "桶的令牌生成速率",
                "name": "rate",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:rate()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0\"",
                    "oneliner": true
                },
                "desc": "桶中的初始令牌数",
                "name": "initial",
                "raw_default": "0",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:initial()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0\"",
                    "oneliner": true
                },
                "desc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                "name": "low_watermark",
                "raw_default": "0",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:initial()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "每个使用者的令牌容量上限",
                "name": "capacity",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:capacity()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "申请的令牌数是否可以被分割",
                "name": "divisible",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"10s\"",
                    "oneliner": true
                },
                "desc": "申请失败后，尝试重新申请的时长最大值",
                "name": "max_retry_time",
                "raw_default": "10s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "force",
                    "oneliner": true
                },
                "desc": "当所有的重试都失败后的处理策略",
                "name": "failure_strategy",
                "raw_default": "force",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:failure_strategy()"
                }
            }
        ],
        "full_name": "limiter:client_opts",
        "paths": [
            "limiter.client.bytes_in",
            "limiter.client.connection",
            "limiter.client.internal",
            "limiter.client.message_in",
            "limiter.client.message_routing",
            "listeners.quic.$name.limiter.client.bytes_in",
            "listeners.quic.$name.limiter.client.connection",
            "listeners.quic.$name.limiter.client.message_in",
            "listeners.quic.$name.limiter.client.message_routing",
            "listeners.ssl.$name.limiter.client.bytes_in",
            "listeners.ssl.$name.limiter.client.connection",
            "listeners.ssl.$name.limiter.client.message_in",
            "listeners.ssl.$name.limiter.client.message_routing",
            "listeners.tcp.$name.limiter.client.bytes_in",
            "listeners.tcp.$name.limiter.client.connection",
            "listeners.tcp.$name.limiter.client.message_in",
            "listeners.tcp.$name.limiter.client.message_routing",
            "listeners.ws.$name.limiter.client.bytes_in",
            "listeners.ws.$name.limiter.client.connection",
            "listeners.ws.$name.limiter.client.message_in",
            "listeners.ws.$name.limiter.client.message_routing",
            "listeners.wss.$name.limiter.client.bytes_in",
            "listeners.wss.$name.limiter.client.connection",
            "listeners.wss.$name.limiter.client.message_in",
            "listeners.wss.$name.limiter.client.message_routing",
            "retainer.flow_control.batch_deliver_limiter.client"
        ],
        "tags": []
    },
    {
        "desc": "Internal limiter.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "桶的令牌生成速率",
                "name": "rate",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:rate()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "该令牌桶的容量",
                "name": "capacity",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:capacity()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0\"",
                    "oneliner": true
                },
                "desc": "桶中的初始令牌数",
                "name": "initial",
                "raw_default": "0",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:initial()"
                }
            },
            {
                "aliases": [],
                "desc": "对桶的每个使用者的速率控制设置",
                "name": "client",
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            }
        ],
        "full_name": "limiter:internal",
        "paths": [
            "retainer.flow_control.batch_deliver_limiter"
        ],
        "tags": []
    },
    {
        "desc": "Settings for the rate limiter.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "bytes_in",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:node_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "message_in",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:node_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                "name": "connection",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:node_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                "name": "message_routing",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:node_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "EMQX 内部功能所用限制器。",
                "name": "internal",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "limiter:node_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  bytes_in {}\n  connection {}\n  internal {}\n  message_in {}\n  message_routing {}\n}\n",
                    "oneliner": false
                },
                "desc": "对桶的每个使用者的速率控制设置",
                "name": "client",
                "raw_default": {
                    "bytes_in": {},
                    "connection": {},
                    "internal": {},
                    "message_in": {},
                    "message_routing": {}
                },
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_fields"
                }
            }
        ],
        "full_name": "limiter",
        "paths": [
            "limiter"
        ],
        "tags": []
    },
    {
        "desc": "Fields of the client level of the listener.",
        "fields": [
            {
                "aliases": [],
                "desc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "bytes_in",
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "message_in",
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                "name": "connection",
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                "name": "message_routing",
                "type": {
                    "kind": "struct",
                    "name": "limiter:client_opts"
                }
            }
        ],
        "full_name": "limiter:listener_client_fields",
        "paths": [
            "listeners.quic.$name.limiter.client",
            "listeners.ssl.$name.limiter.client",
            "listeners.tcp.$name.limiter.client",
            "listeners.ws.$name.limiter.client",
            "listeners.wss.$name.limiter.client"
        ],
        "tags": []
    },
    {
        "desc": "Fields of the listener.",
        "fields": [
            {
                "aliases": [],
                "desc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "bytes_in",
                "type": {
                    "kind": "struct",
                    "name": "limiter:bucket_infinity"
                }
            },
            {
                "aliases": [],
                "desc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                "name": "message_in",
                "type": {
                    "kind": "struct",
                    "name": "limiter:bucket_infinity"
                }
            },
            {
                "aliases": [],
                "desc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                "name": "connection",
                "type": {
                    "kind": "struct",
                    "name": "limiter:bucket_limit"
                }
            },
            {
                "aliases": [],
                "desc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                "name": "message_routing",
                "type": {
                    "kind": "struct",
                    "name": "limiter:bucket_infinity"
                }
            },
            {
                "aliases": [],
                "desc": "对桶的每个使用者的速率控制设置",
                "name": "client",
                "type": {
                    "kind": "struct",
                    "name": "limiter:listener_client_fields"
                }
            }
        ],
        "full_name": "limiter:listener_fields",
        "paths": [
            "listeners.quic.$name.limiter",
            "listeners.ssl.$name.limiter",
            "listeners.tcp.$name.limiter",
            "listeners.ws.$name.limiter",
            "listeners.wss.$name.limiter"
        ],
        "tags": []
    },
    {
        "desc": "Settings for the limiter of the node level.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"infinity\"",
                    "oneliner": true
                },
                "desc": "桶的令牌生成速率",
                "name": "rate",
                "raw_default": "infinity",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:rate()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0\"",
                    "oneliner": true
                },
                "desc": "突发速率。\n突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                "name": "burst",
                "raw_default": "0",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_limiter_schema:burst_rate()"
                }
            }
        ],
        "full_name": "limiter:node_opts",
        "paths": [
            "limiter.bytes_in",
            "limiter.connection",
            "limiter.internal",
            "limiter.message_in",
            "limiter.message_routing"
        ],
        "tags": []
    },
    {
        "desc": "Settings for the delayed module.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启该功能",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "延迟消息的数量上限(0 代表无限)",
                "name": "max_delayed_messages",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            }
        ],
        "full_name": "modules:delayed",
        "paths": [
            "delayed"
        ],
        "tags": []
    },
    {
        "desc": "EMQX 的主题重写功能支持根据用户配置的规则在客户端订阅主题、发布消息、取消订阅的时候将 A 主题重写为 B 主题。\n重写规则分为 Pub 规则和 Sub 规则，Pub 规则匹配 PUSHLISH 报文携带的主题，Sub 规则匹配 SUBSCRIBE、UNSUBSCRIBE 报文携带的主题。\n每条重写规则都由主题过滤器、正则表达式、目标表达式三部分组成。\n在主题重写功能开启的前提下，EMQX 在收到诸如 PUBLISH 报文等带有主题的 MQTT 报文时，将使用报文中的主题去依次匹配配置文件中规则的主题过滤器部分，一旦成功匹配，则使用正则表达式提取主题中的信息，然后替换至目标表达式以构成新的主题。\n目标表达式中可以使用 `$N` 这种格式的变量匹配正则表达中提取出来的元素，`$N` 的值为正则表达式中提取出来的第 N 个元素，比如 `$1` 即为正则表达式提取的第一个元素。\n需要注意的是，EMQX 使用倒序读取配置文件中的重写规则，当一条主题可以同时匹配多条主题重写规则的主题过滤器时，EMQX 仅会使用它匹配到的第一条规则进行重写，如果该条规则中的正则表达式与 MQTT 报文主题不匹配，则重写失败，不会再尝试使用其他的规则进行重写。\n因此用户在使用时需要谨慎的设计 MQTT 报文主题以及主题重写规则。",
        "fields": [
            {
                "aliases": [],
                "desc": "主题重写在哪种操作上生效：\n  - `subscribe`：订阅时重写主题；\n  - `publish`：发布时重写主题；\n  -`all`：全部重写主题",
                "examples": [
                    "publish"
                ],
                "name": "action",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "subscribe",
                        "publish",
                        "all"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "源主题，客户端业务指定的主题",
                "examples": [
                    [
                        120,
                        47,
                        35
                    ]
                ],
                "name": "source_topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "目标主题。",
                "examples": [
                    [
                        122,
                        47,
                        121,
                        47,
                        36,
                        49
                    ]
                ],
                "name": "dest_topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "正则表达式",
                "examples": [
                    [
                        94,
                        120,
                        47,
                        121,
                        47,
                        40,
                        46,
                        43,
                        41,
                        36
                    ]
                ],
                "name": "re",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "modules:rewrite",
        "paths": [
            "rewrite.$INDEX"
        ],
        "tags": []
    },
    {
        "desc": "Settings for the telemetry module.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "Enable telemetry.",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "modules:telemetry",
        "paths": [
            "telemetry"
        ],
        "tags": []
    },
    {
        "desc": "",
        "fields": [
            {
                "aliases": [],
                "desc": "Collect metrics for the topic.",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "modules:topic_metrics",
        "paths": [
            "topic_metrics.$INDEX"
        ],
        "tags": []
    },
    {
        "desc": "配置打印到控制台",
        "fields": [
            {
                "aliases": [],
                "desc": "将输出打印到控制台",
                "name": "function",
                "type": {
                    "kind": "singleton",
                    "name": "console"
                }
            }
        ],
        "full_name": "rule_engine:builtin_action_console",
        "paths": [
            "rule_engine.rules.$id.actions.$INDEX"
        ],
        "tags": [
            "Rule Engine"
        ]
    },
    {
        "desc": "配置重新发布。",
        "fields": [
            {
                "aliases": [],
                "desc": "将消息重新发布为新的 MQTT 消息",
                "name": "function",
                "type": {
                    "kind": "singleton",
                    "name": "republish"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "name": "args",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "rule_engine:republish_args"
                }
            }
        ],
        "full_name": "rule_engine:builtin_action_republish",
        "paths": [
            "rule_engine.rules.$id.actions.$INDEX"
        ],
        "tags": [
            "Rule Engine"
        ]
    },
    {
        "desc": "内置 'republish' 动作的参数。\n可以在参数中使用变量。\n变量是规则中选择的字段。 例如规则 SQL 定义如下：\n<code>\n    SELECT clientid, qos, payload FROM \"t/1\"\n</code>\n然后有 3 个变量可用：<code>clientid</code>、<code>qos</code> 和 <code>payload</code>。 如果我们将参数设置为：\n<code>\n    {\n        topic = \"t/${clientid}\"\n        qos = \"${qos}\"\n        payload = \"msg: ${payload}\"\n    }\n</code>\n当收到一条消息 payload = `hello`, qos = 1, clientid = `Steve` 时，将重新发布一条新的 MQTT 消息到主题 `t/Steve`\n消息内容为 payload = `msg: hello`, and `qos = 1",
        "fields": [
            {
                "aliases": [],
                "desc": "重新发布消息的目标主题。\n允许使用带有变量的模板，请参阅“republish_args”的描述。",
                "examples": [
                    "a/1"
                ],
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${qos}\"",
                    "oneliner": true
                },
                "desc": "要重新发布的消息的 qos。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${qos}。 如果从规则的选择结果中没有找到变量 ${qos}，则使用 0。",
                "examples": [
                    "${qos}"
                ],
                "name": "qos",
                "raw_default": "${qos}",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "qos()"
                        },
                        {
                            "kind": "primitive",
                            "name": "binary()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${retain}\"",
                    "oneliner": true
                },
                "desc": "要重新发布的消息的“保留”标志。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${retain}。 如果从所选结果中未找到变量 ${retain}，则使用 false。",
                "examples": [
                    "${retain}"
                ],
                "name": "retain",
                "raw_default": "${retain}",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "boolean()"
                        },
                        {
                            "kind": "primitive",
                            "name": "binary()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${payload}\"",
                    "oneliner": true
                },
                "desc": "要重新发布的消息的有效负载。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${payload}。 如果从所选结果中未找到变量 ${payload}，则使用字符串 \"undefined\"。",
                "examples": [
                    "${payload}"
                ],
                "name": "payload",
                "raw_default": "${payload}",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${user_properties}\"",
                    "oneliner": true
                },
                "desc": "指定使用哪个变量来填充 MQTT 消息的 User-Property 列表。这个变量的值必须是一个 map 类型。\n可以设置成 <code>${pub_props.'User-Property'}</code> 或者\n使用 <code>SELECT *,pub_props.'User-Property' as user_properties</code> 来把源 MQTT 消息\n的 User-Property 列表用于填充。\n也可以使用 <code>map_put</code> 函数来添加新的 User-Property，\n<code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code>\n注意：MQTT 协议允许一个消息中出现多次同一个 property 名，但是 EMQX 的规则引擎不允许。",
                "examples": [
                    "${pub_props.'User-Property'}"
                ],
                "name": "user_properties",
                "raw_default": "${user_properties}",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "rule_engine:republish_args",
        "paths": [
            "rule_engine.rules.$id.actions.$INDEX.args"
        ],
        "tags": [
            "Rule Engine"
        ]
    },
    {
        "desc": "配置 EMQX 规则引擎。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "当设置为“true”（默认）时，规则引擎将忽略发布到 $SYS 主题的消息。",
                "name": "ignore_sys_message",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "规则",
                "name": "rules",
                "raw_default": {},
                "type": {
                    "kind": "map",
                    "name": "id",
                    "values": {
                        "kind": "struct",
                        "name": "rule_engine:rules"
                    }
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"10s\"",
                    "oneliner": true
                },
                "desc": "规则引擎内建函数 `jq` 默认时间限制",
                "name": "jq_function_default_timeout",
                "raw_default": "10s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "jq_nif",
                    "oneliner": true
                },
                "desc": "jq 规则引擎功能的实现模块。可用的两个选项是 jq_nif 和 jq_port。jq_nif 使用 Erlang NIF 库访问 jq 库，而 jq_port 使用基于 Erlang Port 的实现。jq_nif 方式（默认选项）是这两个选项中最快的实现，但 jq_port 方式更安全，因为这种情况下 jq 程序不会在 Erlang VM 进程中执行。",
                "name": "jq_implementation_module",
                "raw_default": "jq_nif",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "jq_nif",
                        "jq_port"
                    ]
                }
            }
        ],
        "full_name": "rule_engine",
        "paths": [
            "rule_engine"
        ],
        "tags": [
            "Rule Engine"
        ]
    },
    {
        "desc": "配置规则",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "规则名字",
                "examples": [
                    [
                        102,
                        111,
                        111
                    ]
                ],
                "name": "name",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "用于处理消息的 SQL 。\n示例：<code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
                "examples": [
                    [
                        83,
                        69,
                        76,
                        69,
                        67,
                        84,
                        32,
                        42,
                        32,
                        70,
                        82,
                        79,
                        77,
                        32,
                        34,
                        116,
                        101,
                        115,
                        116,
                        47,
                        116,
                        111,
                        112,
                        105,
                        99,
                        34,
                        32,
                        87,
                        72,
                        69,
                        82,
                        69,
                        32,
                        112,
                        97,
                        121,
                        108,
                        111,
                        97,
                        100,
                        46,
                        120,
                        32,
                        61,
                        32,
                        49
                    ]
                ],
                "name": "sql",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "规则的动作列表。\n动作可以是指向 EMQX bridge 的引用，也可以是一个指向函数的对象。\n我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。\n列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。\n如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。\n如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
                "examples": [
                    [
                        "webhook:my_webhook",
                        {
                            "args": {
                                "payload": "${payload}",
                                "topic": "t/1"
                            },
                            "function": "republish"
                        },
                        {
                            "function": "console"
                        }
                    ]
                ],
                "name": "actions",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "primitive",
                                "name": "binary()"
                            },
                            {
                                "kind": "struct",
                                "name": "rule_engine:builtin_action_republish"
                            },
                            {
                                "kind": "struct",
                                "name": "rule_engine:builtin_action_console"
                            },
                            {
                                "kind": "struct",
                                "name": "rule_engine:user_provided_function"
                            }
                        ]
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用或禁用规则引擎",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"\"",
                    "oneliner": true
                },
                "desc": "规则的描述",
                "examples": [
                    [
                        83,
                        111,
                        109,
                        101,
                        32,
                        100,
                        101,
                        115,
                        99,
                        114,
                        105,
                        112,
                        116,
                        105,
                        111,
                        110
                    ]
                ],
                "name": "description",
                "raw_default": "",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "规则的元数据，不要手动修改",
                "name": "metadata",
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            }
        ],
        "full_name": "rule_engine:rules",
        "paths": [
            "rule_engine.rules.$id"
        ],
        "tags": [
            "Rule Engine"
        ]
    },
    {
        "desc": "配置用户函数",
        "fields": [
            {
                "aliases": [],
                "desc": "用户提供的函数。 格式应为：'{module}:{function}'。\n其中 {module} 是 Erlang 回调模块， {function} 是 Erlang 函数。\n要编写自己的函数，请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
                "examples": [
                    [
                        109,
                        111,
                        100,
                        117,
                        108,
                        101,
                        58,
                        102,
                        117,
                        110,
                        99,
                        116,
                        105,
                        111,
                        110
                    ]
                ],
                "name": "function",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "用户提供的参数将作为函数 module:function/3 的第三个参数，\n请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
                "name": "args",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            }
        ],
        "full_name": "rule_engine:user_provided_function",
        "paths": [
            "rule_engine.rules.$id.actions.$INDEX"
        ],
        "tags": [
            "Rule Engine"
        ]
    },
    {
        "desc": "DNS SRV 记录服务发现。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"localhost\"",
                    "oneliner": true
                },
                "desc": "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表。\n当<code>cluster.discovery_strategy</code> 为 <code>dns</code> 时有效。",
                "name": "name",
                "raw_default": "localhost",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "a",
                    "oneliner": true
                },
                "desc": "DNS 记录类型。",
                "name": "record_type",
                "raw_default": "a",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "a",
                        "srv"
                    ]
                }
            }
        ],
        "full_name": "cluster_dns",
        "paths": [
            "cluster.dns"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "使用 'etcd' 服务的服务发现。",
        "fields": [
            {
                "aliases": [],
                "desc": "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:comma_separated_list()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqxcl\"",
                    "oneliner": true
                },
                "desc": "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:\nv2/keys/<prefix>/<cluster.name>/<node.name> <br/>\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                "name": "prefix",
                "raw_default": "emqxcl",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "指定 etcd 中节点信息的过期时间。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                "name": "node_ttl",
                "raw_default": "1m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "当使用 TLS 连接 etcd 时的配置选项。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                "name": "ssl",
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "cluster_etcd",
        "paths": [
            "cluster.etcd"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "Kubernetes 服务发现。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"http://10.110.111.204:8080\"",
                    "oneliner": true
                },
                "desc": "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
                "name": "apiserver",
                "raw_default": "http://10.110.111.204:8080",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx\"",
                    "oneliner": true
                },
                "desc": "指定 Kubernetes 中 EMQX 的服务名。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
                "name": "service_name",
                "raw_default": "emqx",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "ip",
                    "oneliner": true
                },
                "desc": "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。\n指定 <code>cluster.k8s.address_type</code> 为 <code>ip</code>，则将从 Kubernetes 接口中获取集群中其他节点\n的IP地址。",
                "name": "address_type",
                "raw_default": "ip",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "ip",
                        "dns",
                        "hostname"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"default\"",
                    "oneliner": true
                },
                "desc": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，\n可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。",
                "name": "namespace",
                "raw_default": "default",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"pod.local\"",
                    "oneliner": true
                },
                "desc": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。\n与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。",
                "name": "suffix",
                "raw_default": "pod.local",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            }
        ],
        "full_name": "cluster_k8s",
        "paths": [
            "cluster.k8s"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "UDP 组播服务发现。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"239.192.0.1\"",
                    "oneliner": true
                },
                "desc": "指定多播 IPv4 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "addr",
                "raw_default": "239.192.0.1",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[4369,4370]",
                    "oneliner": true
                },
                "desc": "指定多播端口。如有多个端口使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "ports",
                "raw_default": [
                    4369,
                    4370
                ],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "integer()"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0.0.0.0\"",
                    "oneliner": true
                },
                "desc": "指定节点发现服务需要绑定到本地 IP 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "iface",
                "raw_default": "0.0.0.0",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "255",
                    "oneliner": true
                },
                "desc": "指定多播的 Time-To-Live 值。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "ttl",
                "raw_default": 255,
                "type": {
                    "kind": "primitive",
                    "name": "0..255"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设置多播的报文是否投递到本地回环地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "loop",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"16KB\"",
                    "oneliner": true
                },
                "desc": "外发数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "sndbuf",
                "raw_default": "16KB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"16KB\"",
                    "oneliner": true
                },
                "desc": "接收数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "recbuf",
                "raw_default": "16KB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"32KB\"",
                    "oneliner": true
                },
                "desc": "用户级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                "name": "buffer",
                "raw_default": "32KB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            }
        ],
        "full_name": "cluster_mcast",
        "paths": [
            "cluster.mcast"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "静态节点服务发现。新节点通过连接一个节点来加入集群。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "集群中的EMQX节点名称列表，\n指定固定的节点列表，多个节点间使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 static 时，此配置项才有效。\n适合于节点数量较少且固定的集群。",
                "name": "seeds",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "primitive",
                        "name": "atom()"
                    },
                    "kind": "array"
                }
            }
        ],
        "full_name": "cluster_static",
        "paths": [
            "cluster.static"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "授权相关",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "allow",
                    "oneliner": true
                },
                "desc": "如果用户或客户端不匹配ACL规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找\n到此类用户或客户端时，模式的认访问控制操作。\n在“授权”中查找更多详细信息。",
                "name": "no_match",
                "raw_default": "allow",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "allow",
                        "deny"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "ignore",
                    "oneliner": true
                },
                "desc": "授权检查拒绝操作时的操作。",
                "name": "deny_action",
                "raw_default": "ignore",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "ignore",
                        "disconnect"
                    ]
                }
            },
            {
                "aliases": [],
                "name": "cache",
                "type": {
                    "kind": "struct",
                    "name": "broker:authz_cache"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "授权数据源。<br/>\n授权（ACL）数据源的列表。\n它被设计为一个数组，而不是一个散列映射，\n所以可以作为链式访问控制。<br/>\n\n当授权一个 'publish' 或 'subscribe' 行为时，\n该配置列表中的所有数据源将按顺序进行检查。\n如果在某个客户端未找到时(使用 ClientID 或 Username)。\n将会移动到下一个数据源。直至得到 'allow' 或 'deny' 的结果。<br/>\n\n如果在任何数据源中都未找到对应的客户端信息。\n配置的默认行为 ('authorization.no_match') 将生效。<br/>\n\n注意：\n数据源使用 'type' 进行标识。\n使用同一类型的数据源多于一次不被允许。",
                "name": "sources",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "union",
                        "members": [
                            {
                                "kind": "struct",
                                "name": "authz:file"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:http_get"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:http_post"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:mnesia"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:mongo_single"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:mongo_rs"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:mongo_sharded"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:mysql"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:postgresql"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:redis_single"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:redis_sentinel"
                            },
                            {
                                "kind": "struct",
                                "name": "authz:redis_cluster"
                            }
                        ]
                    },
                    "kind": "array"
                }
            }
        ],
        "full_name": "authorization",
        "paths": [
            "authorization"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "EMQX 节点可以组成一个集群，以提高总容量。<br/> 这里指定了节点之间如何连接。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "emqxcl",
                    "oneliner": true
                },
                "desc": "EMQX集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
                "name": "name",
                "raw_default": "emqxcl",
                "type": {
                    "kind": "primitive",
                    "name": "atom()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "manual",
                    "oneliner": true
                },
                "desc": "集群节点发现方式。可选值为:\n- manual: 使用 <code>emqx ctl cluster</code> 命令管理集群。<br/>\n- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。<br/>\n- dns: 使用 DNS A 记录的方式发现节点。<br/>\n- etcd: 使用 etcd 发现节点。<br/>\n- k8s: 使用 Kubernetes API 发现节点。",
                "name": "discovery_strategy",
                "raw_default": "manual",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "manual",
                        "static",
                        "mcast",
                        "dns",
                        "etcd",
                        "k8s"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "当前节点连接的核心节点列表。<br/>\n注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>\n并且设置<code>role</code>为<code>replicant</code>时生效。<br/>\n该值需要在手动或静态集群发现机制下设置。<br/>\n如果使用了自动集群发现机制（如<code>etcd</code>），则不需要设置该值。",
                "name": "core_nodes",
                "raw_default": [],
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:comma_separated_atoms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5m\"",
                    "oneliner": true
                },
                "desc": "指定多久之后从集群中删除离线节点。",
                "name": "autoclean",
                "raw_default": "5m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "集群脑裂自动恢复机制开关。",
                "name": "autoheal",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "inet_tcp",
                    "oneliner": true
                },
                "desc": "分布式 Erlang 集群协议类型。可选值为:<br/>\n- inet_tcp: 使用 IPv4 <br/>\n- inet_tls: 使用 TLS，需要配合 <code>etc/ssl_dist.conf</code> 一起使用。",
                "name": "proto_dist",
                "raw_default": "inet_tcp",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "inet_tcp",
                        "inet6_tcp",
                        "inet_tls"
                    ]
                }
            },
            {
                "aliases": [],
                "name": "static",
                "type": {
                    "kind": "struct",
                    "name": "cluster_static"
                }
            },
            {
                "aliases": [],
                "name": "mcast",
                "type": {
                    "kind": "struct",
                    "name": "cluster_mcast"
                }
            },
            {
                "aliases": [],
                "name": "dns",
                "type": {
                    "kind": "struct",
                    "name": "cluster_dns"
                }
            },
            {
                "aliases": [],
                "name": "etcd",
                "type": {
                    "kind": "struct",
                    "name": "cluster_etcd"
                }
            },
            {
                "aliases": [],
                "name": "k8s",
                "type": {
                    "kind": "struct",
                    "name": "cluster_k8s"
                }
            }
        ],
        "full_name": "cluster",
        "paths": [
            "cluster"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "集群调用功能的选项。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1m\"",
                    "oneliner": true
                },
                "desc": "当集群间调用出错时，多长时间重试一次。",
                "name": "retry_interval",
                "raw_default": "1m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "集群间调用最多保留的历史记录数。只用于排错时查看。",
                "name": "max_history",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "1..500"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5m\"",
                    "oneliner": true
                },
                "desc": "清理过期事务的时间间隔",
                "name": "cleanup_interval",
                "raw_default": "5m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "cluster_call",
        "paths": [
            "node.cluster_call"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "日志处理进程将日志事件打印到 EMQX 控制台。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用此日志处理进程。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "warning",
                    "oneliner": true
                },
                "desc": "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                "name": "level",
                "raw_default": "warning",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:log_level()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"system\"",
                    "oneliner": true
                },
                "desc": "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                "name": "time_offset",
                "raw_default": "system",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unlimited",
                    "oneliner": true
                },
                "desc": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。\n注意：如果日志格式为 JSON，限制字符长度可能会导致截断不完整的 JSON 数据。",
                "name": "chars_limit",
                "raw_default": "unlimited",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "unlimited"
                        },
                        {
                            "kind": "primitive",
                            "name": "100..inf"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "text",
                    "oneliner": true
                },
                "desc": "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                "name": "formatter",
                "raw_default": "text",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "text",
                        "json"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
                "name": "single_line",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。\n这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。\n如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。\n当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。\n默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
                "name": "sync_mode_qlen",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "3000",
                    "oneliner": true
                },
                "desc": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。\n为了使过载保护算法正常工作必须要：<code> sync_mode_qlen =< drop_mode_qlen =< flush_qlen </code> 且 drop_mode_qlen > 1\n要禁用某些模式，请执行以下操作。\n- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。\n- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。\n- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。",
                "name": "drop_mode_qlen",
                "raw_default": 3000,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8000",
                    "oneliner": true
                },
                "desc": "如果缓冲日志事件的数量增长大于此阈值，则会发生冲刷（删除）操作。 日志处理进程会丢弃缓冲的日志消息。\n来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
                "name": "flush_qlen",
                "raw_default": 8000,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "name": "overload_kill",
                "type": {
                    "kind": "struct",
                    "name": "log_overload_kill"
                }
            },
            {
                "aliases": [],
                "name": "burst_limit",
                "type": {
                    "kind": "struct",
                    "name": "log_burst_limit"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "error",
                    "oneliner": true
                },
                "desc": "Supervisor 报告的类型。默认为 error 类型。<br/>\n  - <code>error</code>：仅记录 Erlang 进程中的错误。\n  - <code>progress</code>：除了 error 信息外，还需要记录进程启动的详细信息。",
                "name": "supervisor_reports",
                "raw_default": "error",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "error",
                        "progress"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                "name": "max_depth",
                "raw_default": 100,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "unlimited"
                        },
                        {
                            "kind": "primitive",
                            "name": "non_neg_integer()"
                        }
                    ]
                }
            }
        ],
        "full_name": "console_handler",
        "paths": [
            "log.console_handler"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "EMQX 日志记录支持日志事件的多个接收器。 每个接收器由一个_log handler_表示，可以独立配置。",
        "fields": [
            {
                "aliases": [],
                "name": "console_handler",
                "type": {
                    "kind": "struct",
                    "name": "console_handler"
                }
            },
            {
                "aliases": [],
                "desc": "输出到文件的日志处理进程列表",
                "name": "file_handlers",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "log_file_handler"
                    }
                }
            }
        ],
        "full_name": "log",
        "paths": [
            "log"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "短时间内产生的大量日志事件可能会导致问题，例如：\n  - 日志文件变得非常大\n  - 日志文件轮换过快，有用信息被覆盖\n  - 对系统的整体性能影响\n\n日志突发限制功能可以暂时禁用日志记录以避免这些问题。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用日志限流保护机制。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10000",
                    "oneliner": true
                },
                "desc": "在 `window_time` 间隔内处理的最大日志事件数。 达到限制后，将丢弃连续事件，直到 `window_time` 结束。",
                "name": "max_count",
                "raw_default": 10000,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1s\"",
                    "oneliner": true
                },
                "desc": "参考 <code>max_count</code>。",
                "name": "window_time",
                "raw_default": "1s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "log_burst_limit",
        "paths": [
            "log.console_handler.burst_limit",
            "log.file_handlers.$name.burst_limit"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "日志处理进程将日志事件打印到文件。",
        "fields": [
            {
                "aliases": [],
                "desc": "日志文件路径及名字。",
                "name": "file",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:file()"
                }
            },
            {
                "aliases": [],
                "name": "rotation",
                "type": {
                    "kind": "struct",
                    "name": "log_rotation"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"50MB\"",
                    "oneliner": true
                },
                "desc": "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。\n与 rotation count配合使用。如果 counter 为 10，则是10个文件轮换。",
                "name": "max_size",
                "raw_default": "50MB",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:bytesize()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用此日志处理进程。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "warning",
                    "oneliner": true
                },
                "desc": "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                "name": "level",
                "raw_default": "warning",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:log_level()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"system\"",
                    "oneliner": true
                },
                "desc": "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                "name": "time_offset",
                "raw_default": "system",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unlimited",
                    "oneliner": true
                },
                "desc": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。\n注意：如果日志格式为 JSON，限制字符长度可能会导致截断不完整的 JSON 数据。",
                "name": "chars_limit",
                "raw_default": "unlimited",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "unlimited"
                        },
                        {
                            "kind": "primitive",
                            "name": "100..inf"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "text",
                    "oneliner": true
                },
                "desc": "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                "name": "formatter",
                "raw_default": "text",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "text",
                        "json"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
                "name": "single_line",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。\n这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。\n如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。\n当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。\n默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
                "name": "sync_mode_qlen",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "3000",
                    "oneliner": true
                },
                "desc": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。\n为了使过载保护算法正常工作必须要：<code> sync_mode_qlen =< drop_mode_qlen =< flush_qlen </code> 且 drop_mode_qlen > 1\n要禁用某些模式，请执行以下操作。\n- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。\n- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。\n- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。",
                "name": "drop_mode_qlen",
                "raw_default": 3000,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8000",
                    "oneliner": true
                },
                "desc": "如果缓冲日志事件的数量增长大于此阈值，则会发生冲刷（删除）操作。 日志处理进程会丢弃缓冲的日志消息。\n来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
                "name": "flush_qlen",
                "raw_default": 8000,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "name": "overload_kill",
                "type": {
                    "kind": "struct",
                    "name": "log_overload_kill"
                }
            },
            {
                "aliases": [],
                "name": "burst_limit",
                "type": {
                    "kind": "struct",
                    "name": "log_burst_limit"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "error",
                    "oneliner": true
                },
                "desc": "Supervisor 报告的类型。默认为 error 类型。<br/>\n  - <code>error</code>：仅记录 Erlang 进程中的错误。\n  - <code>progress</code>：除了 error 信息外，还需要记录进程启动的详细信息。",
                "name": "supervisor_reports",
                "raw_default": "error",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "error",
                        "progress"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                "name": "max_depth",
                "raw_default": 100,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "unlimited"
                        },
                        {
                            "kind": "primitive",
                            "name": "non_neg_integer()"
                        }
                    ]
                }
            }
        ],
        "full_name": "log_file_handler",
        "paths": [
            "log.file_handlers.$name"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "日志过载终止，具有过载保护功能。当日志处理进程使用过多内存，或者缓存的日志消息过多时该功能被激活。<br/>\n检测到过载时，日志处理进程将终止，并在冷却期后重新启动。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "日志处理进程过载时为保护自己节点其它的业务能正常，强制杀死日志处理进程。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30MB\"",
                    "oneliner": true
                },
                "desc": "日志处理进程允许使用的最大内存。",
                "name": "mem_size",
                "raw_default": "30MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "20000",
                    "oneliner": true
                },
                "desc": "允许的最大队列长度。",
                "name": "qlen",
                "raw_default": 20000,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "如果处理进程终止，它会在以指定的时间后后自动重新启动。 `infinity` 不自动重启。",
                "name": "restart_after",
                "raw_default": "5s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration_ms()"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            }
        ],
        "full_name": "log_overload_kill",
        "paths": [
            "log.console_handler.overload_kill",
            "log.file_handlers.$name.overload_kill"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "默认情况下，日志存储在 `./log` 目录（用于从 zip 文件安装）或 `/var/log/emqx`（用于二进制安装）。<br/>\n这部分配置，控制每个日志处理进程保留的文件数量。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用日志轮换功能。启动后生成日志文件后缀会加上对应的索引数字，比如：log/emqx.log.1。\n系统会默认生成<code>*.siz/*.idx</code>用于记录日志位置，请不要手动修改这两个文件。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "轮换的最大日志文件数。",
                "name": "count",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "1..2048"
                }
            }
        ],
        "full_name": "log_rotation",
        "paths": [
            "log.file_handlers.$name.rotation"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "节点名称、Cookie、配置文件、数据目录和 Erlang 虚拟机（BEAM）启动参数。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"emqx@127.0.0.1\"",
                    "oneliner": true
                },
                "desc": "节点名。格式为 \\<name>@\\<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。\n详见 http://erlang.org/doc/reference_manual/distributed.html。",
                "importance": "high",
                "name": "name",
                "raw_default": "emqx@127.0.0.1",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
                "importance": "high",
                "name": "cookie",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "2097152",
                    "oneliner": true
                },
                "desc": "Erlang系统同时存在的最大进程数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
                "importance": "medium",
                "name": "process_limit",
                "raw_default": 2097152,
                "type": {
                    "kind": "primitive",
                    "name": "1024..134217727"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1048576",
                    "oneliner": true
                },
                "desc": "Erlang系统同时存在的最大端口数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
                "importance": "high",
                "name": "max_ports",
                "raw_default": 1048576,
                "type": {
                    "kind": "primitive",
                    "name": "1024..134217727"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8192",
                    "oneliner": true
                },
                "desc": "Erlang分布式缓冲区的繁忙阈值，单位是KB。",
                "importance": "low",
                "name": "dist_buffer_size",
                "raw_default": 8192,
                "type": {
                    "kind": "primitive",
                    "name": "1..2097151"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "262144",
                    "oneliner": true
                },
                "desc": "Erlang ETS 表的最大数量",
                "importance": "low",
                "name": "max_ets_tables",
                "raw_default": 262144,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15m\"",
                    "oneliner": true
                },
                "desc": "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。禁用设置为 <code>disabled</code>。",
                "importance": "low",
                "name": "global_gc_interval",
                "raw_default": "15m",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"log/erl_crash.dump\"",
                    "oneliner": true
                },
                "desc": "设置 Erlang crash_dump 文件的存储路径和文件名。",
                "importance": "low",
                "name": "crash_dump_file",
                "raw_default": "log/erl_crash.dump",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:file()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "该配置给出了运行时系统允许花费的写入崩溃转储的秒数。当给定的秒数已经过去，运行时系统将被终止。<br/>\n- 如果设置为0秒，运行时会立即终止，不会尝试写入崩溃转储文件。<br/>\n- 如果设置为一个正数 S，节点会等待 S 秒来完成崩溃转储文件，然后用SIGALRM信号终止运行时系统。<br/>\n- 如果设置为一个负值导致运行时系统的终止等待无限期地直到崩溃转储文件已经完全写入。",
                "importance": "low",
                "name": "crash_dump_seconds",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_s()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"100MB\"",
                    "oneliner": true
                },
                "desc": "限制崩溃文件的大小，当崩溃时节点内存太大，\n如果为了保存现场，需要全部存到崩溃文件中，此处限制最多能保存多大的文件。\n如果超过此限制，崩溃转储将被截断。如果设置为0，系统不会尝试写入崩溃转储文件。",
                "importance": "low",
                "name": "crash_dump_bytes",
                "raw_default": "100MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"2m\"",
                    "oneliner": true
                },
                "desc": "系统调优参数，此配置将覆盖 vm.args 文件里的 -kernel net_ticktime 参数。当一个节点持续无响应多久之后，认为其已经宕机并断开连接。",
                "importance": "low",
                "name": "dist_net_ticktime",
                "raw_default": "2m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_s()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "23",
                    "oneliner": true
                },
                "desc": "错误信息中打印的最大堆栈层数",
                "importance": "low",
                "name": "backtrace_depth",
                "raw_default": 23,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "当新EMQX 加入集群时，应重启的Erlang应用程序的列表。",
                "importance": "low",
                "name": "applications",
                "raw_default": [],
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:comma_separated_atoms()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.8.",
                "importance": "low",
                "name": "etc_dir",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "importance": "low",
                "name": "cluster_call",
                "type": {
                    "kind": "struct",
                    "name": "cluster_call"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "core",
                    "oneliner": true
                },
                "desc": "选择节点的角色。<br/>\n<code>core</code> 节点提供数据的持久性，并负责写入。建议将核心节点放置在不同的机架或不同的可用区。<br/>\n<code>repliant</code> 节点是临时工作节点。 从集群中删除它们，不影响数据库冗余<br/>\n建议复制节点多于核心节点。<br/>\n注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>。",
                "importance": "high",
                "name": "db_role",
                "raw_default": "core",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "core",
                        "replicant"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "async",
                    "oneliner": true
                },
                "desc": "同步模式下，核心节点等待复制节点的确认信息，然后再发送下一条事务日志。",
                "importance": "low",
                "name": "tlog_push_mode",
                "raw_default": "async",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "sync",
                        "async"
                    ]
                }
            }
        ],
        "full_name": "node",
        "paths": [
            "node"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "EMQX 使用 <code>gen_rpc</code> 库来实现跨节点通信。<br/>\n大多数情况下，默认的配置应该可以工作，但如果你需要做一些性能优化或者实验，可以尝试调整这些参数。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "async",
                    "oneliner": true
                },
                "desc": "在 <code>sync</code> 模式下，发送端等待接收端的 ack信号。",
                "name": "mode",
                "raw_default": "async",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "sync",
                        "async"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "tcp",
                    "oneliner": true
                },
                "desc": "集群间通信使用的传输协议。",
                "name": "driver",
                "raw_default": "tcp",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "tcp",
                        "ssl"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "256",
                    "oneliner": true
                },
                "desc": "异步模式下，发送的批量消息的最大数量。",
                "name": "async_batch_size",
                "raw_default": 256,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "stateless",
                    "oneliner": true
                },
                "desc": "<code>manual</code>: 通过 <code>tcp_server_port</code> 来发现端口。\n<br/><code>stateless</code>: 使用无状态的方式来发现端口，使用如下算法。如果节点名称是 <code>\nemqxN@127.0.0.1</code>, N 是一个数字，那么监听端口就是 5370 + N。",
                "name": "port_discovery",
                "raw_default": "stateless",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "manual",
                        "stateless"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "5369",
                    "oneliner": true
                },
                "desc": "RPC 本地服务使用的 TCP 端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 时，此配置才会生效。",
                "name": "tcp_server_port",
                "raw_default": 5369,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "5369",
                    "oneliner": true
                },
                "desc": "RPC 本地服务使用的监听SSL端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 且 <code> dirver </code> 设置为 <code>ssl</code>，\n此配置才会生效。",
                "name": "ssl_server_port",
                "raw_default": 5369,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "设置本节点与远程节点之间的 RPC 通信通道的最大数量。",
                "name": "tcp_client_num",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "1..256"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "建立 RPC 连接的超时时间。",
                "name": "connect_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "TLS 证书文件的路径，用于验证集群节点的身份。\n只有当 <code>rpc.driver</code> 设置为 <code>ssl</code> 时，此配置才会生效。",
                "name": "certfile",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:file()"
                }
            },
            {
                "aliases": [],
                "desc": "<code>rpc.certfile</code> 的私钥文件的路径。<br/>\n注意：此文件内容是私钥，所以需要设置权限为 600。",
                "name": "keyfile",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:file()"
                }
            },
            {
                "aliases": [],
                "desc": "验证 <code>rpc.certfile</code> 的 CA 证书文件的路径。<br/>\n注意：集群中所有节点的证书必须使用同一个 CA 签发。",
                "name": "cacertfile",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_conf_schema:file()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "发送 RPC 请求的超时时间。",
                "name": "send_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "远程节点认证的超时时间。",
                "name": "authentication_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "同步 RPC 的回复超时时间。",
                "name": "call_receive_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15m\"",
                    "oneliner": true
                },
                "desc": "broker 之间的连接在最后一条消息发送后保持打开的时间。",
                "name": "socket_keepalive_idle",
                "raw_default": "15m",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_s()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"75s\"",
                    "oneliner": true
                },
                "desc": "keepalive 消息的间隔。",
                "name": "socket_keepalive_interval",
                "raw_default": "75s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_s()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "9",
                    "oneliner": true
                },
                "desc": "keepalive 探测消息发送失败的次数，直到 RPC 连接被认为已经断开。",
                "name": "socket_keepalive_count",
                "raw_default": 9,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1MB\"",
                    "oneliner": true
                },
                "desc": "TCP 调节参数。TCP 发送缓冲区大小。",
                "name": "socket_sndbuf",
                "raw_default": "1MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1MB\"",
                    "oneliner": true
                },
                "desc": "TCP 调节参数。TCP 接收缓冲区大小。",
                "name": "socket_recbuf",
                "raw_default": "1MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1MB\"",
                    "oneliner": true
                },
                "desc": "TCP 调节参数。用户模式套接字缓冲区大小。",
                "name": "socket_buffer",
                "raw_default": "1MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "兼容旧的无鉴权模式",
                "name": "insecure_fallback",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "rpc",
        "paths": [
            "rpc"
        ],
        "tags": [
            "EMQX"
        ]
    },
    {
        "desc": "配置 Topology",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "最大溢出。",
                "name": "max_overflow",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "当池内工人太多时，等待多久清除多余工人。",
                "name": "overflow_ttl",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                "name": "overflow_check_period",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                "name": "local_threshold_ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "超时重连的等待时间。",
                "name": "connect_timeout_ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                "name": "socket_timeout_ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                "name": "server_selection_timeout_ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "工作者等待连接可用的最长时间。",
                "name": "wait_queue_timeout_ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"200s\"",
                    "oneliner": true
                },
                "desc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                "name": "heartbeat_frequency_ms",
                "raw_default": "200s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "心跳间的最小间隙",
                "name": "min_heartbeat_frequency_ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            }
        ],
        "full_name": "topology",
        "paths": [
            "authentication.$INDEX.topology",
            "authorization.sources.$INDEX.topology",
            "gateway.coap.authentication.topology",
            "gateway.coap.listeners.dtls.$name.authentication.topology",
            "gateway.coap.listeners.udp.$name.authentication.topology",
            "gateway.exproto.authentication.topology",
            "gateway.exproto.listeners.dtls.$name.authentication.topology",
            "gateway.exproto.listeners.ssl.$name.authentication.topology",
            "gateway.exproto.listeners.tcp.$name.authentication.topology",
            "gateway.exproto.listeners.udp.$name.authentication.topology",
            "gateway.lwm2m.authentication.topology",
            "gateway.lwm2m.listeners.dtls.$name.authentication.topology",
            "gateway.lwm2m.listeners.udp.$name.authentication.topology",
            "gateway.mqttsn.authentication.topology",
            "gateway.mqttsn.listeners.dtls.$name.authentication.topology",
            "gateway.mqttsn.listeners.udp.$name.authentication.topology",
            "gateway.stomp.authentication.topology",
            "gateway.stomp.listeners.ssl.$name.authentication.topology",
            "gateway.stomp.listeners.tcp.$name.authentication.topology",
            "listeners.ssl.$name.authentication.$INDEX.topology",
            "listeners.tcp.$name.authentication.$INDEX.topology",
            "listeners.ws.$name.authentication.$INDEX.topology",
            "listeners.wss.$name.authentication.$INDEX.topology"
        ],
        "tags": []
    },
    {
        "desc": "Settings for `conn_congestion` alarm.\n\nSometimes the MQTT connection (usually an MQTT subscriber) may\nget \"congested\", because there are too many packets to be sent.\nThe socket tries to buffer the packets until the buffer is\nfull. If more packets arrive after that, the packets will be\n\"pending\" in the queue, and we consider the connection\ncongested.\n\nNote: `sndbuf` can be set to larger value if the\nalarm is triggered too often.\nThe name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,\nwhere the `<ClientID>` is the client ID of the congested MQTT connection,\nand `<Username>` is the username or `unknown_user`.",
        "fields": [
            {
                "aliases": [],
                "desc": "启用或者禁用连接阻塞告警功能。",
                "name": "enable_alarm",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "清除警报前的最短时间。<br/>只有当队列中没有挂起的数据，并且连接至少被堵塞了 <code>min_alarm_sustain_duration</code> 毫秒时，<br/>报警才会被清除。这是为了避免太频繁地清除和再次发出警报。",
                "name": "min_alarm_sustain_duration",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "zone:conn_congestion",
        "paths": [
            "zones.$name.conn_congestion"
        ],
        "tags": []
    },
    {
        "desc": "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
        "fields": [
            {
                "aliases": [],
                "desc": "启用抖动检测功能。",
                "name": "enable",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "MQTT 客户端在“窗口”时间内允许的最大断开次数。",
                "name": "max_count",
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "抖动检测的时间窗口。",
                "name": "window_time",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "抖动的客户端将会被禁止登录多长时间。",
                "name": "ban_time",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "zone:flapping_detect",
        "paths": [
            "zones.$name.flapping_detect"
        ],
        "tags": []
    },
    {
        "desc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
        "fields": [
            {
                "aliases": [],
                "desc": "启用强制垃圾回收。",
                "name": "enable",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "在进程收到多少消息之后，对此进程执行垃圾回收。",
                "name": "count",
                "type": {
                    "kind": "primitive",
                    "name": "0..inf"
                }
            },
            {
                "aliases": [],
                "desc": "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
                "name": "bytes",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            }
        ],
        "full_name": "zone:force_gc",
        "paths": [
            "zones.$name.force_gc"
        ],
        "tags": []
    },
    {
        "desc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
        "fields": [
            {
                "aliases": [],
                "desc": "启用 `force_shutdown` 功能。",
                "name": "enable",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "消息队列的最大长度。",
                "name": "max_message_queue_len",
                "type": {
                    "kind": "primitive",
                    "name": "0..inf"
                }
            },
            {
                "aliases": [],
                "desc": "Heap 的总大小。",
                "name": "max_heap_size",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:wordsize()"
                }
            }
        ],
        "full_name": "zone:force_shutdown",
        "paths": [
            "zones.$name.force_shutdown"
        ],
        "tags": []
    },
    {
        "desc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
        "fields": [
            {
                "aliases": [],
                "desc": "TCP 连接建立后，如果在 <code>idle_timeout</code> 指定的时间内未收到客户端的 MQTT CONNECT 报文，则连接将被断开。\n如果连接在 CONNECT 报文被 EMQX 接受之后空闲超过该时长，那么服务这个连接的 Erlang 进程会进入休眠以节省系统资源。\n注意，该配置值如果设置过大的情况下，如果大量恶意客户端只连接，但不发任何数据，可能会导致系统资源被恶意消耗。",
                "name": "idle_timeout",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "允许的最大 MQTT 报文大小。",
                "name": "max_packet_size",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "desc": "允许的最大 MQTT Client ID 长度。",
                "name": "max_clientid_len",
                "type": {
                    "kind": "primitive",
                    "name": "23..65535"
                }
            },
            {
                "aliases": [],
                "desc": "允许的最大主题层级。",
                "name": "max_topic_levels",
                "type": {
                    "kind": "primitive",
                    "name": "1..65535"
                }
            },
            {
                "aliases": [],
                "desc": "允许的最大 QoS 等级。",
                "name": "max_qos_allowed",
                "type": {
                    "kind": "primitive",
                    "name": "qos()"
                }
            },
            {
                "aliases": [],
                "desc": "允许的最大主题别名数，0 表示不支持主题别名。",
                "name": "max_topic_alias",
                "type": {
                    "kind": "primitive",
                    "name": "0..65535"
                }
            },
            {
                "aliases": [],
                "desc": "是否启用对 MQTT 保留消息的支持。",
                "name": "retain_available",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "是否启用对 MQTT 通配符订阅的支持。",
                "name": "wildcard_subscription",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "是否启用对 MQTT 共享订阅的支持。",
                "name": "shared_subscription",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "是否启用对 MQTT 排它订阅的支持。",
                "name": "exclusive_subscription",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "是否为 MQTT v3.1.1/v3.1.0 客户端忽略投递自己发布的消息，类似于 MQTT 5.0 中的 <code>No Local</code> 订阅选项。",
                "name": "ignore_loop_deliver",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "是否以严格模式解析 MQTT 消息。\n当设置为 true 时，例如客户端 ID、主题名称等中的无效 utf8 字符串将导致客户端断开连接。",
                "name": "strict_mode",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "指定返回给客户端的响应信息。如果设置为 \"\"，则禁用此功能。仅适用于使用 MQTT 5.0 协议的客户端。",
                "name": "response_information",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "EMQX 要求客户端使用的保活时间，配置为 <code>disabled</code> 表示将使用客户端指定的保活时间。需要用到 MQTT 5.0 中的 <code>Server Keep Alive</code>，因此仅适用于使用 MQTT 5.0 协议的客户端。",
                "name": "server_keepalive",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        },
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "Broker 判定客户端保活超时使用的退避乘数。如果 EMQX 在 <code>Keep Alive * Backoff * 2</code> 秒内未收到任何报文，EMQX 将关闭当前连接。",
                "name": "keepalive_backoff",
                "type": {
                    "kind": "primitive",
                    "name": "number()"
                }
            },
            {
                "aliases": [],
                "desc": "允许每个客户端建立的最大订阅数量。",
                "name": "max_subscriptions",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "1..inf"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
                "name": "upgrade_qos",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
                "name": "max_inflight",
                "type": {
                    "kind": "primitive",
                    "name": "1..65535"
                }
            },
            {
                "aliases": [],
                "desc": "QoS 1/2 消息的重新投递间隔。",
                "name": "retry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
                "name": "max_awaiting_rel",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "integer()"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
                "name": "await_rel_timeout",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
                "name": "session_expiry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "desc": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
                "name": "max_mqueue_len",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "non_neg_integer()"
                        },
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
                "name": "mqueue_priorities",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "map()"
                        },
                        {
                            "kind": "singleton",
                            "name": "disabled"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
                "name": "mqueue_default_priority",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "highest",
                        "lowest"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
                "name": "mqueue_store_qos0",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 <code>使用对端证书作为用户名</code>（<code>peer_cert_as_username</code>） 和 <code>使用对端证书作为客户端 ID</code>（<code>peer_cert_as_clientid</code>）。",
                "name": "use_username_as_clientid",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名。仅适用于 TLS 连接。\n目前支持配置为以下内容：\n- <code>cn</code>: 取证书的 CN 字段作为 Username\n- <code>dn</code>: 取证书的 DN 字段作为 Username\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容作为 Username\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式后作为 Username\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容的 MD5 值作为 Username",
                "name": "peer_cert_as_username",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "disabled",
                        "cn",
                        "dn",
                        "crt",
                        "pem",
                        "md5"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接。\n目前支持配置为以下内容：\n- <code>cn</code>: 取证书的 CN 字段作为 Client ID\n- <code>dn</code>: 取证书的 DN 字段作为 Client ID\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容作为 Client ID\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式后作为 Client ID\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容的 MD5 值作为 Client ID",
                "name": "peer_cert_as_clientid",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "disabled",
                        "cn",
                        "dn",
                        "crt",
                        "pem",
                        "md5"
                    ]
                }
            }
        ],
        "full_name": "zone:mqtt",
        "paths": [
            "zones.$name.mqtt"
        ],
        "tags": []
    },
    {
        "desc": "Overload protection mechanism monitors the load of the system and temporarily\ndisables some features (such as accepting new connections) when the load is high.",
        "fields": [
            {
                "aliases": [],
                "desc": "是否对系统过载做出反应。",
                "name": "enable",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "高负载时，一些不重要的任务可能会延迟执行，在这里设置允许延迟的时间。",
                "name": "backoff_delay",
                "type": {
                    "kind": "primitive",
                    "name": "0..inf"
                }
            },
            {
                "aliases": [],
                "desc": "高负载时，跳过强制 GC。",
                "name": "backoff_gc",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "高负载时，跳过进程休眠。",
                "name": "backoff_hibernation",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "高负载时，拒绝新进来的客户端连接。",
                "name": "backoff_new_conn",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "zone:overload_protection",
        "paths": [
            "zones.$name.overload_protection"
        ],
        "tags": []
    },
    {
        "desc": "Enable/disable statistic data collection.\nStatistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
        "fields": [
            {
                "aliases": [],
                "desc": "启用/禁用统计数据收集功能。",
                "name": "enable",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "zone:stats",
        "paths": [
            "zones.$name.stats"
        ],
        "tags": []
    },
    {
        "desc": "使用内置数据库作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "built_in_database"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"username\"",
                    "oneliner": true
                },
                "desc": "指定使用客户端ID `clientid` 还是用户名 `username` 进行认证。",
                "name": "user_id_type",
                "raw_default": "username",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "clientid",
                        "username"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash creation and verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt_rw"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "authn-builtin_db:authentication",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "Settings for bcrypt password hashing algorithm.",
        "fields": [
            {
                "aliases": [],
                "desc": "BCRYPT password hashing.",
                "name": "name",
                "type": {
                    "kind": "singleton",
                    "name": "bcrypt"
                }
            }
        ],
        "full_name": "authn-hash:bcrypt",
        "paths": [
            "authentication.$INDEX.password_hash_algorithm",
            "gateway.coap.authentication.password_hash_algorithm",
            "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.stomp.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
            "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
        ],
        "tags": []
    },
    {
        "desc": "Settings for bcrypt password hashing algorithm (for DB backends with write capability).",
        "fields": [
            {
                "aliases": [],
                "desc": "BCRYPT password hashing.",
                "name": "name",
                "type": {
                    "kind": "singleton",
                    "name": "bcrypt"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "Salt rounds for BCRYPT password generation.",
                "examples": [
                    10
                ],
                "name": "salt_rounds",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            }
        ],
        "full_name": "authn-hash:bcrypt_rw",
        "paths": [
            "authentication.$INDEX.password_hash_algorithm",
            "gateway.coap.authentication.password_hash_algorithm",
            "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.stomp.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
            "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
        ],
        "tags": []
    },
    {
        "desc": "Settings for PBKDF2 password hashing algorithm.",
        "fields": [
            {
                "aliases": [],
                "desc": "PBKDF2 password hashing.",
                "name": "name",
                "type": {
                    "kind": "singleton",
                    "name": "pbkdf2"
                }
            },
            {
                "aliases": [],
                "desc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                "name": "mac_fun",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "md4",
                        "md5",
                        "ripemd160",
                        "sha",
                        "sha224",
                        "sha256",
                        "sha384",
                        "sha512"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "Iteration count for PBKDF2 hashing algorithm.",
                "name": "iterations",
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                "name": "dk_length",
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            }
        ],
        "full_name": "authn-hash:pbkdf2",
        "paths": [
            "authentication.$INDEX.password_hash_algorithm",
            "gateway.coap.authentication.password_hash_algorithm",
            "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.stomp.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
            "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
        ],
        "tags": []
    },
    {
        "desc": "Settings for simple algorithms.",
        "fields": [
            {
                "aliases": [],
                "desc": "Simple password hashing algorithm.",
                "name": "name",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "plain",
                        "md5",
                        "sha",
                        "sha256",
                        "sha512"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "prefix",
                    "oneliner": true
                },
                "desc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                "name": "salt_position",
                "raw_default": "prefix",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "disable",
                        "prefix",
                        "suffix"
                    ]
                }
            }
        ],
        "full_name": "authn-hash:simple",
        "paths": [
            "authentication.$INDEX.password_hash_algorithm",
            "gateway.coap.authentication.password_hash_algorithm",
            "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
            "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
            "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
            "gateway.stomp.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
            "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
            "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
            "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
        ],
        "tags": []
    },
    {
        "desc": "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 GET 请求)。",
        "fields": [
            {
                "aliases": [],
                "desc": "HTTP 请求方法。",
                "name": "method",
                "type": {
                    "kind": "singleton",
                    "name": "get"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                    "oneliner": false
                },
                "desc": "HTTP Headers 列表 (无 <code>content-type</code>) 。",
                "name": "headers",
                "raw_default": {
                    "accept": "application/json",
                    "cache-control": "no-cache",
                    "connection": "keep-alive",
                    "keep-alive": "timeout=30, max=1000"
                },
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "http"
                }
            },
            {
                "aliases": [],
                "desc": "认证 HTTP 服务器地址。",
                "name": "url",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP request body。",
                "name": "body",
                "type": {
                    "kind": "primitive",
                    "name": "#{term() => binary()}"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "HTTP 请求超时时长。",
                "name": "request_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "连接HTTP服务器的超时时间。",
                "name": "connect_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                "name": "enable_pipelining",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "max_retries",
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "设置 HTTP 请求的参数。",
                "name": "request",
                "type": {
                    "kind": "struct",
                    "name": "connector-http:request"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "retry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-http:get",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 POST 请求)。",
        "fields": [
            {
                "aliases": [],
                "desc": "HTTP 请求方法。",
                "name": "method",
                "type": {
                    "kind": "singleton",
                    "name": "post"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                    "oneliner": false
                },
                "desc": "HTTP Headers 列表",
                "name": "headers",
                "raw_default": {
                    "accept": "application/json",
                    "cache-control": "no-cache",
                    "connection": "keep-alive",
                    "content-type": "application/json",
                    "keep-alive": "timeout=30, max=1000"
                },
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "http"
                }
            },
            {
                "aliases": [],
                "desc": "认证 HTTP 服务器地址。",
                "name": "url",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP request body。",
                "name": "body",
                "type": {
                    "kind": "primitive",
                    "name": "#{term() => binary()}"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "HTTP 请求超时时长。",
                "name": "request_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "连接HTTP服务器的超时时间。",
                "name": "connect_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                "name": "enable_pipelining",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "max_retries",
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "设置 HTTP 请求的参数。",
                "name": "request",
                "type": {
                    "kind": "struct",
                    "name": "connector-http:request"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "retry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-http:post",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "用于认证的 JWT 使用 HMAC 算法签发时的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "是否使用 JWKS。",
                "name": "use_jwks",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "false"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
                "name": "algorithm",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "hmac-based"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "使用 HMAC 算法时用于验证 JWT 的密钥",
                "name": "secret",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "密钥是否为 Base64 编码。",
                "name": "secret_base64_encoded",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "jwt"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"acl\"",
                    "oneliner": true
                },
                "desc": "JWT claim name to use for getting ACL rules.",
                "name": "acl_claim_name",
                "raw_default": "acl",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
                "name": "verify_claims",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "[term()]"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "password",
                    "oneliner": true
                },
                "desc": "要从中获取 JWT 的字段。",
                "name": "from",
                "raw_default": "password",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "username",
                        "password"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "authn-jwt:hmac-based",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "用于认证的 JWTs 需要从 JWKS 端点获取时的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "是否使用 JWKS。",
                "name": "use_jwks",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "true"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "JWKS 端点， 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
                "name": "endpoint",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "300",
                    "oneliner": true
                },
                "desc": "JWKS 刷新间隔。",
                "name": "refresh_interval",
                "raw_default": 300,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "SSL 选项。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "jwt"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"acl\"",
                    "oneliner": true
                },
                "desc": "JWT claim name to use for getting ACL rules.",
                "name": "acl_claim_name",
                "raw_default": "acl",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
                "name": "verify_claims",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "[term()]"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "password",
                    "oneliner": true
                },
                "desc": "要从中获取 JWT 的字段。",
                "name": "from",
                "raw_default": "password",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "username",
                        "password"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "authn-jwt:jwks",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "用于认证的 JWT 使用 RSA 或 ECDSA 算法签发时的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "是否使用 JWKS。",
                "name": "use_jwks",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "false"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
                "name": "algorithm",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "public-key"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "用于验证 JWT 的公钥。",
                "name": "public_key",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "jwt"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"acl\"",
                    "oneliner": true
                },
                "desc": "JWT claim name to use for getting ACL rules.",
                "name": "acl_claim_name",
                "raw_default": "acl",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
                "name": "verify_claims",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "[term()]"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "password",
                    "oneliner": true
                },
                "desc": "要从中获取 JWT 的字段。",
                "name": "from",
                "raw_default": "password",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "username",
                        "password"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "authn-jwt:public-key",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 MongoDB (Replica Set) 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "mongodb"
                }
            },
            {
                "aliases": [],
                "desc": "存储认证数据的集合。",
                "name": "collection",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
                "name": "filter",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"password_hash\"",
                    "oneliner": true
                },
                "desc": "文档中用于存放密码散列的字段。",
                "name": "password_hash_field",
                "raw_default": "password_hash",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"salt\"",
                    "oneliner": true
                },
                "desc": "文档中用于存放盐值的字段。",
                "name": "salt_field",
                "raw_default": "salt",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"is_superuser\"",
                    "oneliner": true
                },
                "desc": "文档中用于定义用户是否具有超级用户权限的字段。",
                "name": "is_superuser_field",
                "raw_default": "is_superuser",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "rs",
                    "oneliner": true
                },
                "desc": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
                "name": "mongo_type",
                "raw_default": "rs",
                "type": {
                    "kind": "singleton",
                    "name": "rs"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unsafe",
                    "oneliner": true
                },
                "desc": "写模式。",
                "name": "w_mode",
                "raw_default": "unsafe",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "unsafe",
                        "safe"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "master",
                    "oneliner": true
                },
                "desc": "读模式。",
                "name": "r_mode",
                "raw_default": "master",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "master",
                        "slave_ok"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "副本集的名称。",
                "name": "replica_set_name",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用 DNS SRV 记录。",
                "name": "srv_record",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "与用户证书关联的数据库名称。",
                "name": "auth_source",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "name": "topology",
                "type": {
                    "kind": "struct",
                    "name": "topology"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-mongodb:replica-set",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 MongoDB (Sharded Cluster) 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "mongodb"
                }
            },
            {
                "aliases": [],
                "desc": "存储认证数据的集合。",
                "name": "collection",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
                "name": "filter",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"password_hash\"",
                    "oneliner": true
                },
                "desc": "文档中用于存放密码散列的字段。",
                "name": "password_hash_field",
                "raw_default": "password_hash",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"salt\"",
                    "oneliner": true
                },
                "desc": "文档中用于存放盐值的字段。",
                "name": "salt_field",
                "raw_default": "salt",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"is_superuser\"",
                    "oneliner": true
                },
                "desc": "文档中用于定义用户是否具有超级用户权限的字段。",
                "name": "is_superuser_field",
                "raw_default": "is_superuser",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "sharded",
                    "oneliner": true
                },
                "desc": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
                "name": "mongo_type",
                "raw_default": "sharded",
                "type": {
                    "kind": "singleton",
                    "name": "sharded"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unsafe",
                    "oneliner": true
                },
                "desc": "写模式。",
                "name": "w_mode",
                "raw_default": "unsafe",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "unsafe",
                        "safe"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用 DNS SRV 记录。",
                "name": "srv_record",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "与用户证书关联的数据库名称。",
                "name": "auth_source",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "name": "topology",
                "type": {
                    "kind": "struct",
                    "name": "topology"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-mongodb:sharded-cluster",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 MongoDB (Standalone) 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "mongodb"
                }
            },
            {
                "aliases": [],
                "desc": "存储认证数据的集合。",
                "name": "collection",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
                "name": "filter",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"password_hash\"",
                    "oneliner": true
                },
                "desc": "文档中用于存放密码散列的字段。",
                "name": "password_hash_field",
                "raw_default": "password_hash",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"salt\"",
                    "oneliner": true
                },
                "desc": "文档中用于存放盐值的字段。",
                "name": "salt_field",
                "raw_default": "salt",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"is_superuser\"",
                    "oneliner": true
                },
                "desc": "文档中用于定义用户是否具有超级用户权限的字段。",
                "name": "is_superuser_field",
                "raw_default": "is_superuser",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "single",
                    "oneliner": true
                },
                "desc": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
                "name": "mongo_type",
                "raw_default": "single",
                "type": {
                    "kind": "singleton",
                    "name": "single"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "unsafe",
                    "oneliner": true
                },
                "desc": "写模式。",
                "name": "w_mode",
                "raw_default": "unsafe",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "unsafe",
                        "safe"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "使用 DNS SRV 记录。",
                "name": "srv_record",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "与用户证书关联的数据库名称。",
                "name": "auth_source",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "name": "topology",
                "type": {
                    "kind": "struct",
                    "name": "topology"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-mongodb:standalone",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 MySQL 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "mysql"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "用于查询密码散列等用于认证的数据的 SQL 语句。",
                "name": "query",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "SQL 查询的超时时间。",
                "name": "query_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"root\"",
                    "oneliner": true
                },
                "desc": "内部数据库的用户名。",
                "name": "username",
                "raw_default": "root",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-mysql:authentication",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 PostgreSQL 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "postgresql"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "用于查询密码散列等用于认证的数据的 SQL 语句。",
                "name": "query",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "数据库名字。",
                "name": "database",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库的用户名。",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-postgresql:authentication",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "此配置用于启用 TLS-PSK 身份验证。\n\nPSK 是 “Pre-Shared-Keys” 的缩写。\n\n注意: 确保 SSL 监听器仅启用了 'tlsv1.2'，并且配置了PSK 密码套件，例如 'RSA-PSK-AES256-GCM-SHA384'。\n\n可以通过查看监听器中的 SSL 选项，了解更多详细信息。\n\n可以通过配置 'init_file' 来设置初始化的 ID 和 密钥",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否开启 TLS PSK 支持",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "如果设置了初始化文件，EMQX 将在启动时从初始化文件中导入 PSK 信息到内建数据库中。\n这个文件需要按行进行组织，每一行必须遵守如下格式: <code>PSKIdentity:SharedSecret</code>\n例如: <code>mydevice1:c2VjcmV0</code>",
                "name": "init_file",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\":\"",
                    "oneliner": true
                },
                "desc": "PSK 文件中 <code>PSKIdentity</code> 和 <code>SharedSecret</code> 之间的分隔符",
                "name": "separator",
                "raw_default": ":",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "50",
                    "oneliner": true
                },
                "desc": "将 PSK 文件导入到内建数据时每个块的大小",
                "name": "chunk_size",
                "raw_default": 50,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            }
        ],
        "full_name": "authn-psk:psk_authentication",
        "paths": [
            "psk_authentication"
        ],
        "tags": []
    },
    {
        "desc": "使用 Redis (Cluster) 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "redis"
                }
            },
            {
                "aliases": [],
                "desc": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
                "name": "cmd",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "cluster",
                    "oneliner": true
                },
                "desc": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
                "name": "redis_type",
                "raw_default": "cluster",
                "type": {
                    "kind": "singleton",
                    "name": "cluster"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-redis:cluster",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 Redis (Sentinel) 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "redis"
                }
            },
            {
                "aliases": [],
                "desc": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
                "name": "cmd",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                "name": "servers",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "sentinel",
                    "oneliner": true
                },
                "desc": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
                "name": "redis_type",
                "raw_default": "sentinel",
                "type": {
                    "kind": "singleton",
                    "name": "sentinel"
                }
            },
            {
                "aliases": [],
                "desc": "Redis 哨兵模式下的集群名称。",
                "name": "sentinel",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "Redis 数据库 ID。",
                "name": "database",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-redis:sentinel",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "使用 Redis (Standalone) 作为认证数据源的认证器的配置项。",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "password_based"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "redis"
                }
            },
            {
                "aliases": [],
                "desc": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
                "name": "cmd",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{name = sha256, salt_position = prefix}",
                    "oneliner": true
                },
                "desc": "Options for password hash verification.",
                "name": "password_hash_algorithm",
                "raw_default": {
                    "name": "sha256",
                    "salt_position": "prefix"
                },
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "struct",
                            "name": "authn-hash:bcrypt"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:pbkdf2"
                        },
                        {
                            "kind": "struct",
                            "name": "authn-hash:simple"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "single",
                    "oneliner": true
                },
                "desc": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
                "name": "redis_type",
                "raw_default": "single",
                "type": {
                    "kind": "singleton",
                    "name": "single"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "桥接远端服务时使用的连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "内部数据库密码。",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "Redis 数据库 ID。",
                "name": "database",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.15.",
                "name": "auto_reconnect",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            }
        ],
        "full_name": "authn-redis:standalone",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "Settings for Salted Challenge Response Authentication Mechanism\n(SCRAM) authentication.",
        "fields": [
            {
                "aliases": [],
                "desc": "认证机制。",
                "name": "mechanism",
                "type": {
                    "kind": "singleton",
                    "name": "scram"
                }
            },
            {
                "aliases": [],
                "desc": "后端类型。",
                "name": "backend",
                "type": {
                    "kind": "singleton",
                    "name": "built_in_database"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "sha256",
                    "oneliner": true
                },
                "desc": "Hashing algorithm.",
                "name": "algorithm",
                "raw_default": "sha256",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "sha256",
                        "sha512"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "4096",
                    "oneliner": true
                },
                "desc": "Iteration count.",
                "name": "iteration_count",
                "raw_default": 4096,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "authn-scram-builtin_db:authentication",
        "paths": [
            "authentication.$INDEX",
            "gateway.coap.authentication",
            "gateway.coap.listeners.dtls.$name.authentication",
            "gateway.coap.listeners.udp.$name.authentication",
            "gateway.exproto.authentication",
            "gateway.exproto.listeners.dtls.$name.authentication",
            "gateway.exproto.listeners.ssl.$name.authentication",
            "gateway.exproto.listeners.tcp.$name.authentication",
            "gateway.exproto.listeners.udp.$name.authentication",
            "gateway.lwm2m.authentication",
            "gateway.lwm2m.listeners.dtls.$name.authentication",
            "gateway.lwm2m.listeners.udp.$name.authentication",
            "gateway.mqttsn.authentication",
            "gateway.mqttsn.listeners.dtls.$name.authentication",
            "gateway.mqttsn.listeners.udp.$name.authentication",
            "gateway.stomp.authentication",
            "gateway.stomp.listeners.ssl.$name.authentication",
            "gateway.stomp.listeners.tcp.$name.authentication",
            "listeners.ssl.$name.authentication.$INDEX",
            "listeners.tcp.$name.authentication.$INDEX",
            "listeners.ws.$name.authentication.$INDEX",
            "listeners.wss.$name.authentication.$INDEX"
        ],
        "tags": [
            "Authentication"
        ]
    },
    {
        "desc": "设备登录成功之后，通过预设的订阅表示符，为设备自动完成订阅。支持使用占位符。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "设备登录成功之后，通过预设的订阅表示符，为设备自动完成订阅。支持使用占位符。",
                "name": "topics",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "struct",
                        "name": "auto_subscribe:topic"
                    },
                    "kind": "array"
                }
            }
        ],
        "full_name": "auto_subscribe",
        "paths": [
            "auto_subscribe"
        ],
        "tags": []
    },
    {
        "desc": "订阅标识符，支持使用占位符，例如 client/${clientid}/username/${username}/host/${host}/port/${port}\n必填，且不可为空字符串",
        "fields": [
            {
                "aliases": [],
                "desc": "订阅标识符，支持使用占位符，例如 client/${clientid}/username/${username}/host/${host}/port/${port}\n必填，且不可为空字符串",
                "examples": [
                    "/clientid/${clientid}/username/${username}/host/${host}/port/${port}"
                ],
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "缺省值为 0，服务质量，\nQoS 0：消息最多传递一次，如果当时客户端不可用，则会丢失该消息。\nQoS 1：消息传递至少 1 次。\nQoS 2：消息仅传送一次。",
                "name": "qos",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "qos()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "指定订阅建立时服务端是否向客户端发送保留消息，\n可选值 0：只要客户端订阅成功，服务端就发送保留消息。\n可选值 1：客户端订阅成功且该订阅此前不存在，服务端才发送保留消息。毕竟有些时候客户端重新发起订阅可能只是为了改变一下 QoS，并不意味着它想再次接收保留消息。\n可选值 2：即便客户订阅成功，服务端也不会发送保留消息。",
                "name": "rh",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "0..2"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "缺省值为 0，这一选项用来指定服务端向客户端转发消息时是否要保留其中的 RETAIN 标识，注意这一选项不会影响保留消息中的 RETAIN 标识。因此当 Retain As Publish 选项被设置为 0 时，客户端直接依靠消息中的 RETAIN 标识来区分这是一个正常的转发消息还是一个保留消息，而不是去判断消息是否是自己订阅后收到的第一个消息（转发消息甚至可能会先于保留消息被发送，视不同 Broker 的具体实现而定）。",
                "name": "rap",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "0..1"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "缺省值为0，\nMQTT v3.1.1：如果设备订阅了自己发布消息的主题，那么将收到自己发布的所有消息。\nMQTT v5：如果设备在订阅时将此选项设置为 1，那么服务端将不会向设备转发自己发布的消息",
                "name": "nl",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "0..1"
                }
            }
        ],
        "full_name": "auto_subscribe:topic",
        "paths": [
            "auto_subscribe.topics.$INDEX"
        ],
        "tags": []
    },
    {
        "desc": "MQTT Bridge 配置",
        "fields": [
            {
                "aliases": [],
                "desc": "转发消息到 HTTP 服务器的 WebHook",
                "name": "webhook",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "bridge_webhook:config"
                    }
                }
            },
            {
                "aliases": [],
                "desc": "桥接到另一个 MQTT Broker 的 MQTT Bridge",
                "name": "mqtt",
                "type": {
                    "kind": "map",
                    "name": "name",
                    "values": {
                        "kind": "struct",
                        "name": "bridge_mqtt:config"
                    }
                }
            }
        ],
        "full_name": "bridge:bridges",
        "paths": [
            "bridges"
        ],
        "tags": [
            "Bridge"
        ]
    },
    {
        "desc": "MQTT Bridge 的配置。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用/禁用 Bridge",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "资源相关的选项。",
                "name": "resource_opts",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "bridge_mqtt:creation_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "cluster_shareload",
                    "oneliner": true
                },
                "desc": "MQTT 桥的模式。 <br/>\n- cluster_shareload：在 emqx 集群的每个节点上创建一个 MQTT 连接。<br/>\n在“cluster_shareload”模式下，来自远程代理的传入负载通过共享订阅的方式接收。<br/>\n请注意，<code>clientid</code> 以节点名称为后缀，这是为了避免不同节点之间的 <code> clientid</code> 冲突。\n而且对于入口连接的 <code>remote.topic</code>，我们只能使用共享订阅主题过滤器。",
                "name": "mode",
                "raw_default": "cluster_shareload",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "cluster_shareload"
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "远程 MQTT Broker的主机和端口。",
                "name": "server",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "可选的前缀，用于在出口网桥使用的clientid前加上前缀。",
                "name": "clientid_prefix",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.16.",
                "name": "reconnect_interval",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "v4",
                    "oneliner": true
                },
                "desc": "MQTT 协议版本",
                "name": "proto_ver",
                "raw_default": "v4",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "v3",
                        "v4",
                        "v5"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否启用 Bridge Mode。\n注意：此设置只针对 MQTT 协议版本 < 5.0 有效，并且需要远程 MQTT Broker 支持 Bridge Mode。\n如果设置为 true ，桥接会告诉远端服务器当前连接是一个桥接而不是一个普通的客户端。\n这意味着消息回环检测会更加高效，并且远端服务器收到的保留消息的标志位会透传给本地。",
                "name": "bridge_mode",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "MQTT 协议的用户名",
                "name": "username",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "MQTT 协议的密码",
                "name": "password",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "与 ingress MQTT 桥的远程服务器重连时是否清除老的 MQTT 会话。",
                "name": "clean_start",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"300s\"",
                    "oneliner": true
                },
                "desc": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                "name": "keepalive",
                "raw_default": "300s",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                "name": "retry_interval",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "32",
                    "oneliner": true
                },
                "desc": "MQTT 协议的最大飞行（已发送但未确认）消息",
                "name": "max_inflight",
                "raw_default": 32,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "入口配置定义了该桥接如何从远程 MQTT Broker 接收消息，然后将消息发送到本地 Broker。<br/>\n        以下字段中允许使用带有变量的模板：'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n        注意：如果此桥接被用作规则的输入，并且配置了 'local.topic'，则从远程代理获取的消息将同时被发送到 'local.topic' 和规则。",
                "name": "ingress",
                "type": {
                    "kind": "struct",
                    "name": "connector-mqtt:ingress"
                }
            },
            {
                "aliases": [],
                "desc": "出口配置定义了该桥接如何将消息从本地 Broker 转发到远程 Broker。\n以下字段中允许使用带有变量的模板：'remote.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n注意：如果此桥接被用作规则的动作，并且配置了 'local.topic'，则从规则输出的数据以及匹配到 'local.topic' 的 MQTT 消息都会被转发。",
                "name": "egress",
                "type": {
                    "kind": "struct",
                    "name": "connector-mqtt:egress"
                }
            }
        ],
        "full_name": "bridge_mqtt:config",
        "paths": [
            "bridges.mqtt.$name"
        ],
        "tags": []
    },
    {
        "desc": "资源启动相关的选项。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                "name": "worker_pool_size",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "健康检查间隔。",
                "name": "health_check_interval",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"true\"",
                    "oneliner": true
                },
                "desc": "是否在创建资源后立即启动资源。",
                "name": "start_after_created",
                "raw_default": "true",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                "name": "start_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60s\"",
                    "oneliner": true
                },
                "desc": "资源断开以后，自动重连的时间间隔。",
                "name": "auto_restart_interval",
                "raw_default": "60s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration_ms()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "async",
                    "oneliner": true
                },
                "desc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                "name": "query_mode",
                "raw_default": "async",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "sync",
                        "async"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                "name": "request_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration_ms()"
                        }
                    ]
                }
            },
            {
                "aliases": [
                    "async_inflight_window"
                ],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                "name": "inflight_window",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.14.",
                "name": "enable_queue",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"100MB\"",
                    "oneliner": true
                },
                "desc": "每个缓存 worker 允许使用的最大字节数。",
                "name": "max_queue_bytes",
                "raw_default": "100MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            }
        ],
        "full_name": "bridge_mqtt:creation_opts",
        "paths": [
            "bridges.mqtt.$name.resource_opts"
        ],
        "tags": []
    },
    {
        "desc": "HTTP Bridge 配置",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "启用/禁用 Bridge",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "资源相关的选项。",
                "name": "resource_opts",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "bridge_webhook:creation_opts"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "连接HTTP服务器的超时时间。",
                "name": "connect_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.4.",
                "name": "retry_interval",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "random",
                    "oneliner": true
                },
                "desc": "连接池的类型，可用类型有`random`, `hash`。",
                "name": "pool_type",
                "raw_default": "random",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_connector_http:pool_type()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "8",
                    "oneliner": true
                },
                "desc": "连接池大小。",
                "name": "pool_size",
                "raw_default": 8,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                "name": "enable_pipelining",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "设置 HTTP 请求的参数。",
                "name": "request",
                "type": {
                    "kind": "struct",
                    "name": "connector-http:request"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{enable = false}",
                    "oneliner": true
                },
                "desc": "启用 SSL 连接。",
                "name": "ssl",
                "raw_default": {
                    "enable": false
                },
                "type": {
                    "kind": "struct",
                    "name": "broker:ssl_client_opts"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP Bridge 的 URL。<br/>\n路径中允许使用带变量的模板，但是 host， port 不允许使用变量模板。<br/>\n例如，<code> http://localhost:9901/${topic} </code> 是允许的，\n但是<code> http://${host}:9901/message </code>\n或 <code> http://localhost:${port}/message </code>\n不允许。",
                "name": "url",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since 5.0.12.",
                "name": "direction",
                "type": {
                    "kind": "singleton",
                    "name": "egress"
                }
            },
            {
                "aliases": [],
                "desc": "发送到 'local_topic' 的消息都会转发到 HTTP 服务器。 <br/>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 HTTP 服务器。",
                "name": "local_topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "post",
                    "oneliner": true
                },
                "desc": "HTTP 请求的方法。 所有可用的方法包括：post、put、get、delete。<br/>\n允许使用带有变量的模板。",
                "name": "method",
                "raw_default": "post",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "post",
                        "put",
                        "get",
                        "delete"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=5\"\n}\n",
                    "oneliner": false
                },
                "desc": "HTTP 请求的标头。<br/>\n允许使用带有变量的模板。",
                "name": "headers",
                "raw_default": {
                    "accept": "application/json",
                    "cache-control": "no-cache",
                    "connection": "keep-alive",
                    "content-type": "application/json",
                    "keep-alive": "timeout=5"
                },
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP 请求的正文。<br/>\n如果没有设置该字段，请求正文将是包含所有可用字段的 JSON object。<br/>\n如果该 webhook 是由于收到 MQTT 消息触发的，'所有可用字段' 将是 MQTT 消息的\n上下文信息；如果该 webhook 是由于规则触发的，'所有可用字段' 则为触发事件的上下文信息。<br/>\n允许使用带有变量的模板。",
                "name": "body",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "2",
                    "oneliner": true
                },
                "desc": "HTTP 请求失败最大重试次数",
                "name": "max_retries",
                "raw_default": 2,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "HTTP 请求超时",
                "name": "request_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            }
        ],
        "full_name": "bridge_webhook:config",
        "paths": [
            "bridges.webhook.$name"
        ],
        "tags": []
    },
    {
        "desc": "资源启动相关的选项。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "16",
                    "oneliner": true
                },
                "desc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                "name": "worker_pool_size",
                "raw_default": 16,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "健康检查间隔。",
                "name": "health_check_interval",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"true\"",
                    "oneliner": true
                },
                "desc": "是否在创建资源后立即启动资源。",
                "name": "start_after_created",
                "raw_default": "true",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                "name": "start_timeout",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"60s\"",
                    "oneliner": true
                },
                "desc": "资源断开以后，自动重连的时间间隔。",
                "name": "auto_restart_interval",
                "raw_default": "60s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration_ms()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "async",
                    "oneliner": true
                },
                "desc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                "name": "query_mode",
                "raw_default": "async",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "sync",
                        "async"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                "name": "request_timeout",
                "raw_default": "15s",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "singleton",
                            "name": "infinity"
                        },
                        {
                            "kind": "primitive",
                            "name": "emqx_schema:duration_ms()"
                        }
                    ]
                }
            },
            {
                "aliases": [
                    "async_inflight_window"
                ],
                "default": {
                    "hocon": "100",
                    "oneliner": true
                },
                "desc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                "name": "inflight_window",
                "raw_default": 100,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "Deprecated since v5.0.14.",
                "name": "enable_queue",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"100MB\"",
                    "oneliner": true
                },
                "desc": "每个缓存 worker 允许使用的最大字节数。",
                "name": "max_queue_bytes",
                "raw_default": "100MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            }
        ],
        "full_name": "bridge_webhook:creation_opts",
        "paths": [
            "bridges.webhook.$name.resource_opts"
        ],
        "tags": []
    },
    {
        "desc": "",
        "fields": [
            {
                "aliases": [],
                "desc": "HTTP 请求方法。",
                "name": "method",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP请求路径。",
                "name": "path",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP请求报文主体。",
                "name": "body",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP 头字段列表。",
                "name": "headers",
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            },
            {
                "aliases": [],
                "desc": "请求出错时的最大重试次数。",
                "name": "max_retries",
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "desc": "HTTP 请求超时。",
                "name": "request_timeout",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            }
        ],
        "full_name": "connector-http:request",
        "paths": [
            "authentication.$INDEX.request",
            "authorization.sources.$INDEX.request",
            "bridges.webhook.$name.request",
            "gateway.coap.authentication.request",
            "gateway.coap.listeners.dtls.$name.authentication.request",
            "gateway.coap.listeners.udp.$name.authentication.request",
            "gateway.exproto.authentication.request",
            "gateway.exproto.listeners.dtls.$name.authentication.request",
            "gateway.exproto.listeners.ssl.$name.authentication.request",
            "gateway.exproto.listeners.tcp.$name.authentication.request",
            "gateway.exproto.listeners.udp.$name.authentication.request",
            "gateway.lwm2m.authentication.request",
            "gateway.lwm2m.listeners.dtls.$name.authentication.request",
            "gateway.lwm2m.listeners.udp.$name.authentication.request",
            "gateway.mqttsn.authentication.request",
            "gateway.mqttsn.listeners.dtls.$name.authentication.request",
            "gateway.mqttsn.listeners.udp.$name.authentication.request",
            "gateway.stomp.authentication.request",
            "gateway.stomp.listeners.ssl.$name.authentication.request",
            "gateway.stomp.listeners.tcp.$name.authentication.request",
            "listeners.ssl.$name.authentication.$INDEX.request",
            "listeners.tcp.$name.authentication.$INDEX.request",
            "listeners.ws.$name.authentication.$INDEX.request",
            "listeners.wss.$name.authentication.$INDEX.request"
        ],
        "tags": []
    },
    {
        "desc": "出口配置定义了该桥接如何将消息从本地 Broker 转发到远程 Broker。\n以下字段中允许使用带有变量的模板：'remote.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n注意：如果此桥接被用作规则的动作，并且配置了 'local.topic'，则从规则输出的数据以及匹配到 'local.topic' 的 MQTT 消息都会被转发。",
        "fields": [
            {
                "aliases": [],
                "desc": "如何从本地 Broker 接收消息相关的配置。",
                "name": "local",
                "type": {
                    "kind": "struct",
                    "name": "connector-mqtt:egress_local"
                }
            },
            {
                "aliases": [],
                "desc": "发送消息到远程 Broker 相关的配置。",
                "name": "remote",
                "type": {
                    "kind": "struct",
                    "name": "connector-mqtt:egress_remote"
                }
            }
        ],
        "full_name": "connector-mqtt:egress",
        "paths": [
            "bridges.mqtt.$name.egress"
        ],
        "tags": []
    },
    {
        "desc": "如何从本地 Broker 接收消息相关的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "要转发到远程broker的本地主题",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "connector-mqtt:egress_local",
        "paths": [
            "bridges.mqtt.$name.egress.local"
        ],
        "tags": []
    },
    {
        "desc": "发送消息到远程 Broker 相关的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "转发到远程broker的哪个topic。<br/>\n允许使用带有变量的模板。",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1",
                    "oneliner": true
                },
                "desc": "待发送 MQTT 消息的 QoS。<br/>\n允许使用带有变量的模板。",
                "name": "qos",
                "raw_default": 1,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "qos()"
                        },
                        {
                            "kind": "primitive",
                            "name": "binary()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "要发送的 MQTT 消息的“保留”标志。<br/>\n允许使用带有变量的模板。",
                "name": "retain",
                "raw_default": false,
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "boolean()"
                        },
                        {
                            "kind": "primitive",
                            "name": "binary()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "要发送的 MQTT 消息的负载。<br/>\n允许使用带有变量的模板。",
                "name": "payload",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "connector-mqtt:egress_remote",
        "paths": [
            "bridges.mqtt.$name.egress.remote"
        ],
        "tags": []
    },
    {
        "desc": "入口配置定义了该桥接如何从远程 MQTT Broker 接收消息，然后将消息发送到本地 Broker。<br/>\n        以下字段中允许使用带有变量的模板：'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n        注意：如果此桥接被用作规则的输入，并且配置了 'local.topic'，则从远程代理获取的消息将同时被发送到 'local.topic' 和规则。",
        "fields": [
            {
                "aliases": [],
                "desc": "订阅远程 Broker 相关的配置。",
                "name": "remote",
                "type": {
                    "kind": "struct",
                    "name": "connector-mqtt:ingress_remote"
                }
            },
            {
                "aliases": [],
                "desc": "发送消息到本地 Broker 相关的配置。",
                "name": "local",
                "type": {
                    "kind": "struct",
                    "name": "connector-mqtt:ingress_local"
                }
            }
        ],
        "full_name": "connector-mqtt:ingress",
        "paths": [
            "bridges.mqtt.$name.ingress"
        ],
        "tags": []
    },
    {
        "desc": "发送消息到本地 Broker 相关的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "向本地broker的哪个topic发送消息。<br/>\n允许使用带有变量的模板。",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${qos}\"",
                    "oneliner": true
                },
                "desc": "待发送 MQTT 消息的 QoS。<br/>\n允许使用带有变量的模板。",
                "name": "qos",
                "raw_default": "${qos}",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "qos()"
                        },
                        {
                            "kind": "primitive",
                            "name": "binary()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${retain}\"",
                    "oneliner": true
                },
                "desc": "要发送的 MQTT 消息的“保留”标志。<br/>\n允许使用带有变量的模板。",
                "name": "retain",
                "raw_default": "${retain}",
                "type": {
                    "kind": "union",
                    "members": [
                        {
                            "kind": "primitive",
                            "name": "boolean()"
                        },
                        {
                            "kind": "primitive",
                            "name": "binary()"
                        }
                    ]
                }
            },
            {
                "aliases": [],
                "desc": "要发送的 MQTT 消息的负载。<br/>\n允许使用带有变量的模板。",
                "name": "payload",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            }
        ],
        "full_name": "connector-mqtt:ingress_local",
        "paths": [
            "bridges.mqtt.$name.ingress.local"
        ],
        "tags": []
    },
    {
        "desc": "订阅远程 Broker 相关的配置。",
        "fields": [
            {
                "aliases": [],
                "desc": "从远程broker的哪个topic接收消息",
                "name": "topic",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "1",
                    "oneliner": true
                },
                "desc": "订阅远程borker时要使用的 QoS 级别",
                "name": "qos",
                "raw_default": 1,
                "type": {
                    "kind": "primitive",
                    "name": "qos()"
                }
            }
        ],
        "full_name": "connector-mqtt:ingress_remote",
        "paths": [
            "bridges.mqtt.$name.ingress.remote"
        ],
        "tags": []
    },
    {
        "desc": "管理EMQX插件。<br/>\n插件可以是EMQX安装包中的一部分，也可以是一个独立的安装包。<br/>\n独立安装的插件称为“外部插件”。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "[]",
                    "oneliner": true
                },
                "desc": "一组插件的状态。插件将按照定义的顺序启动",
                "name": "states",
                "raw_default": [],
                "type": {
                    "elements": {
                        "kind": "struct",
                        "name": "plugin:state"
                    },
                    "kind": "array"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"plugins\"",
                    "oneliner": true
                },
                "desc": "插件安装包的目录，出于安全考虑，该目录应该值允许 <code>emqx</code>，或用于运行 EMQX 服务的用户拥有写入权限。",
                "name": "install_dir",
                "raw_default": "plugins",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"5s\"",
                    "oneliner": true
                },
                "desc": "检查间隔：检查集群中插件的状态是否一致，<br/>\n如果连续3次检查结果不一致，则报警。",
                "name": "check_interval",
                "raw_default": "5s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration()"
                }
            }
        ],
        "full_name": "plugin:plugins",
        "paths": [
            "plugins"
        ],
        "tags": []
    },
    {
        "desc": "描述插件的状态",
        "fields": [
            {
                "aliases": [],
                "desc": "插件的名称{name}-{version}。<br/>\n它应该与插件的发布包名称一致，如my_plugin-0.1.0。",
                "name": "name_vsn",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "desc": "设置为“true”以启用此插件",
                "name": "enable",
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "plugin:state",
        "paths": [
            "plugins.states.$INDEX"
        ],
        "tags": []
    },
    {
        "desc": "Prometheus 监控数据推送",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "\"http://127.0.0.1:9091\"",
                    "oneliner": true
                },
                "desc": "Prometheus 服务器地址",
                "name": "push_gateway_server",
                "raw_default": "http://127.0.0.1:9091",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"15s\"",
                    "oneliner": true
                },
                "desc": "数据推送间隔",
                "name": "interval",
                "raw_default": "15s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "推送到 Push Gateway 的 HTTP Headers 列表。<br/>\n例如，<code> { Authorization = \"some-authz-tokens\"}</code>",
                "name": "headers",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "[{string(), string()}]"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"${name}/instance/${name}~${host}\"",
                    "oneliner": true
                },
                "desc": "推送到 Push Gateway 的 Job 名称。可用变量为：<br/>\n- ${name}: EMQX 节点的名称。\n- ${host}: EMQX 节点主机名。\n例如，当 EMQX 节点名为 <code>emqx@127.0.0.1</code> 则 name 变量的值为 <code>emqx</code>，host 变量的值为 <code>127.0.0.1</code>。<br/>\n默认值为: <code>${name}/instance/${name}~${host}</code>",
                "name": "job_name",
                "raw_default": "${name}/instance/${name}~${host}",
                "type": {
                    "kind": "primitive",
                    "name": "binary()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "开启或关闭 Prometheus 数据推送",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            }
        ],
        "full_name": "prometheus",
        "paths": [
            "prometheus"
        ],
        "tags": []
    },
    {
        "desc": "Retainer batching and rate limiting.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "从存储后端批量加载时的每批数量上限，0 代表一次性读取",
                "name": "batch_read_number",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "批量派发时每批的数量。0 代表一次性全部派发",
                "name": "batch_deliver_number",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "0..1000"
                }
            },
            {
                "aliases": [],
                "desc": "批量发送的限流器的名称。\n限流器可以用来防止短时间内向客户端发送太多的消息，从而避免过多的消息导致客户端队列堵塞甚至崩溃。\n这个名称需要是指向 `limiter.batch` 下的一个真实存在的限流器。\n如果这个字段为空，则不使用限流器。",
                "name": "batch_deliver_limiter",
                "type": {
                    "kind": "struct",
                    "name": "limiter:internal"
                }
            }
        ],
        "full_name": "retainer:flow_control",
        "paths": [
            "retainer.flow_control"
        ],
        "tags": []
    },
    {
        "desc": "Configuration of the internal database storing retained messages.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "built_in_database",
                    "oneliner": true
                },
                "desc": "后端类型",
                "name": "type",
                "raw_default": "built_in_database",
                "type": {
                    "kind": "singleton",
                    "name": "built_in_database"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "ram",
                    "oneliner": true
                },
                "desc": "选择消息是存放在磁盘还是内存中",
                "name": "storage_type",
                "raw_default": "ram",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "ram",
                        "disc"
                    ]
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "0",
                    "oneliner": true
                },
                "desc": "消息保留的数量上限。0 表示无限",
                "name": "max_retained_messages",
                "raw_default": 0,
                "type": {
                    "kind": "primitive",
                    "name": "non_neg_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "[\n  [1, 2, 3],\n  [1, 3],\n  [2, 3],\n  [3]\n]\n",
                    "oneliner": false
                },
                "desc": "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
                "examples": [
                    [
                        [
                            2,
                            4
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                "name": "index_specs",
                "raw_default": [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        2,
                        3
                    ],
                    [
                        3
                    ]
                ],
                "type": {
                    "kind": "primitive",
                    "name": "[[integer()]]"
                }
            }
        ],
        "full_name": "retainer:mnesia_config",
        "paths": [
            "retainer.backend"
        ],
        "tags": []
    },
    {
        "desc": "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "true",
                    "oneliner": true
                },
                "desc": "是否开启消息保留功能",
                "name": "enable",
                "raw_default": true,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0s\"",
                    "oneliner": true
                },
                "desc": "消息保留时间。0 代表永久保留",
                "name": "msg_expiry_interval",
                "raw_default": "0s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"0s\"",
                    "oneliner": true
                },
                "desc": "消息清理间隔。0 代表不进行清理",
                "name": "msg_clear_interval",
                "raw_default": "0s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "流控设置",
                "name": "flow_control",
                "raw_default": {},
                "type": {
                    "kind": "struct",
                    "name": "retainer:flow_control"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"1MB\"",
                    "oneliner": true
                },
                "desc": "消息大小最大值",
                "name": "max_payload_size",
                "raw_default": "1MB",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:bytesize()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "是否不发送保留消息的清理消息，在 MQTT 5.0 中如果一条保留消息的消息体为空，则会清除掉之前存储\n的对应的保留消息，通过这个值控制是否停止发送清理消息",
                "name": "stop_publish_clear_msg",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "desc": "保留消息的存储后端",
                "name": "backend",
                "type": {
                    "kind": "struct",
                    "name": "retainer:mnesia_config"
                }
            }
        ],
        "full_name": "retainer",
        "paths": [
            "retainer"
        ],
        "tags": []
    },
    {
        "desc": "Configuration for `slow_subs` feature.",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "开启慢订阅",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"500ms\"",
                    "oneliner": true
                },
                "desc": "慢订阅统计的阈值",
                "name": "threshold",
                "raw_default": "500ms",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"300s\"",
                    "oneliner": true
                },
                "desc": "慢订阅记录的有效时间",
                "name": "expire_interval",
                "raw_default": "300s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "10",
                    "oneliner": true
                },
                "desc": "慢订阅统计表的记录数量上限",
                "name": "top_k_num",
                "raw_default": 10,
                "type": {
                    "kind": "primitive",
                    "name": "pos_integer()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "whole",
                    "oneliner": true
                },
                "desc": "慢订阅的统计类型",
                "name": "stats_type",
                "raw_default": "whole",
                "type": {
                    "kind": "enum",
                    "symbols": [
                        "whole",
                        "internal",
                        "response"
                    ]
                }
            }
        ],
        "full_name": "slow_subs",
        "paths": [
            "slow_subs"
        ],
        "tags": []
    },
    {
        "desc": "StatsD 指标采集与推送配置。",
        "fields": [
            {
                "aliases": [],
                "default": {
                    "hocon": "false",
                    "oneliner": true
                },
                "desc": "启用或禁用 StatsD 指标采集和推送服务。",
                "name": "enable",
                "raw_default": false,
                "type": {
                    "kind": "primitive",
                    "name": "boolean()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"127.0.0.1:8125\"",
                    "oneliner": true
                },
                "desc": "StatsD 服务器地址。",
                "name": "server",
                "raw_default": "127.0.0.1:8125",
                "type": {
                    "kind": "primitive",
                    "name": "string()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "指标的采样间隔。",
                "name": "sample_time_interval",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "\"30s\"",
                    "oneliner": true
                },
                "desc": "指标的推送间隔。",
                "name": "flush_time_interval",
                "raw_default": "30s",
                "type": {
                    "kind": "primitive",
                    "name": "emqx_schema:duration_ms()"
                }
            },
            {
                "aliases": [],
                "default": {
                    "hocon": "{}",
                    "oneliner": true
                },
                "desc": "指标的标签。",
                "name": "tags",
                "raw_default": {},
                "type": {
                    "kind": "primitive",
                    "name": "map()"
                }
            }
        ],
        "full_name": "statsd",
        "paths": [
            "statsd"
        ],
        "tags": []
    }
]